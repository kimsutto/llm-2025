[
  {
    "filePath": "../repo/vue-ts-realworld-app/src/App.vue",
    "template": "<div>\n    <github-corner />\n    <app-header />\n    <keep-alive>\n      <router-view />\n    </keep-alive>\n    <app-footer />\n    <notifications position=\"bottom right\" />\n  </div>",
    "script": "import { Component, Vue } from \"vue-property-decorator\";\n\nimport GithubCorner from \"@/components/GithubCorner.vue\";\nimport AppFooter from \"@/layouts/AppFooter.vue\";\nimport AppHeader from \"@/layouts/AppHeader.vue\";\n\n@Component({\n  components: {\n    AppFooter,\n    AppHeader,\n    GithubCorner\n  }\n})\nexport default class App extends Vue {}",
    "className": "App",
    "methods": [],
    "properties": [],
    "emits": [],
    "embeddingText": "Vue 컴포넌트 이름: App\n파일 경로: ../repo/vue-ts-realworld-app/src/App.vue\n\n[Template HTML]\n<div>\n    <github-corner />\n    <app-header />\n    <keep-alive>\n      <router-view />\n    </keep-alive>\n    <app-footer />\n    <notifications position=\"bottom right\" />\n  </div>\n\n[Script Code]\nimport { Component, Vue } from \"vue-property-decorator\";\n\nimport GithubCorner from \"@/components/GithubCorner.vue\";\nimport AppFooter from \"@/layouts/AppFooter.vue\";\nimport AppHeader from \"@/layouts/AppHeader.vue\";\n\n@Component({\n  components: {\n    AppFooter,\n    AppHeader,\n    GithubCorner\n  }\n})\nexport default class App extends Vue {}\n\n[Props]: 없음\n[Methods]: 없음\n[Emits]: 없음"
  },
  {
    "filePath": "../repo/vue-ts-realworld-app/src/components/CommonLoader.vue",
    "template": "<div class=\"loader\" :style=\"styleVars\"></div>",
    "script": "import { Component, Prop, Vue } from \"vue-property-decorator\";\n\n@Component\nexport default class CommonLoader extends Vue {\n  @Prop({ default: 10 }) size!: number;\n  @Prop({ default: 60 }) margin!: number;\n\n  get styleVars(): any {\n    return {\n      \"--loader-size\": `${this.size}em`,\n      \"--margin\": `${this.margin}px`\n    };\n  }\n}",
    "className": "CommonLoader",
    "methods": [
      "styleVars"
    ],
    "properties": [
      "margin",
      "size"
    ],
    "emits": [],
    "embeddingText": "Vue 컴포넌트 이름: CommonLoader\n파일 경로: ../repo/vue-ts-realworld-app/src/components/CommonLoader.vue\n\n[Template HTML]\n<div class=\"loader\" :style=\"styleVars\"></div>\n\n[Script Code]\nimport { Component, Prop, Vue } from \"vue-property-decorator\";\n\n@Component\nexport default class CommonLoader extends Vue {\n  @Prop({ default: 10 }) size!: number;\n  @Prop({ default: 60 }) margin!: number;\n\n  get styleVars(): any {\n    return {\n      \"--loader-size\": `${this.size}em`,\n      \"--margin\": `${this.margin}px`\n    };\n  }\n}\n\n[Props]: size, margin\n[Methods]: styleVars\n[Emits]: 없음"
  },
  {
    "filePath": "../repo/vue-ts-realworld-app/src/components/CommonErrorsList.vue",
    "template": "<ul class=\"error-messages\">\n    <li v-for=\"error in errors\" :key=\"error\">{{ error }}</li>\n  </ul>",
    "script": "import { Component, Prop, Vue } from \"vue-property-decorator\";\n\n@Component\nexport default class CommonErrorsList extends Vue {\n  @Prop({ required: true }) errors!: string[];\n}",
    "className": "CommonErrorsList",
    "methods": [],
    "properties": [
      "errors"
    ],
    "emits": [],
    "embeddingText": "Vue 컴포넌트 이름: CommonErrorsList\n파일 경로: ../repo/vue-ts-realworld-app/src/components/CommonErrorsList.vue\n\n[Template HTML]\n<ul class=\"error-messages\">\n    <li v-for=\"error in errors\" :key=\"error\">{{ error }}</li>\n  </ul>\n\n[Script Code]\nimport { Component, Prop, Vue } from \"vue-property-decorator\";\n\n@Component\nexport default class CommonErrorsList extends Vue {\n  @Prop({ required: true }) errors!: string[];\n}\n\n[Props]: errors\n[Methods]: 없음\n[Emits]: 없음"
  },
  {
    "filePath": "../repo/vue-ts-realworld-app/src/components/ArticleMeta.vue",
    "template": "<div class=\"article-meta\">\n    <router-link\n      :to=\"{\n        name: $routesNames.profileIndex,\n        params: { username: authorUsername }\n      }\"\n    >\n      <img :src=\"authorImage\" />\n    </router-link>\n    <div class=\"info\">\n      <router-link\n        :to=\"{\n          name: $routesNames.profileIndex,\n          params: { username: authorUsername }\n        }\"\n        class=\"author\"\n      >\n        {{ authorUsername }}\n      </router-link>\n      <span class=\"date\">{{ articleDate }}</span>\n    </div>\n    <slot></slot>\n  </div>",
    "script": "import { Component, Prop, Vue } from \"vue-property-decorator\";\n\nimport DateUtils from \"@/utils/DateUtils\";\n@Component\nexport default class ArticleMeta extends Vue {\n  @Prop({ required: true }) createdAt!: Date;\n  @Prop() authorImage!: string;\n  @Prop({ required: true }) authorUsername!: string;\n\n  get articleDate(): string {\n    return DateUtils.yearMonthDayWeekdayFormat(this.createdAt);\n  }\n}",
    "className": "ArticleMeta",
    "methods": [
      "articleDate"
    ],
    "properties": [
      "createdAt",
      "authorUsername",
      "authorImage"
    ],
    "emits": [],
    "embeddingText": "Vue 컴포넌트 이름: ArticleMeta\n파일 경로: ../repo/vue-ts-realworld-app/src/components/ArticleMeta.vue\n\n[Template HTML]\n<div class=\"article-meta\">\n    <router-link\n      :to=\"{\n        name: $routesNames.profileIndex,\n        params: { username: authorUsername }\n      }\"\n    >\n      <img :src=\"authorImage\" />\n    </router-link>\n    <div class=\"info\">\n      <router-link\n        :to=\"{\n          name: $routesNames.profileIndex,\n          params: { username: authorUsername }\n        }\"\n        class=\"author\"\n      >\n        {{ authorUsername }}\n      </router-link>\n      <span class=\"date\">{{ articleDate }}</span>\n    </div>\n    <slot></slot>\n  </div>\n\n[Script Code]\nimport { Component, Prop, Vue } from \"vue-property-decorator\";\n\nimport DateUtils from \"@/utils/DateUtils\";\n@Component\nexport default class ArticleMeta extends Vue {\n  @Prop({ required: true }) createdAt!: Date;\n  @Prop() authorImage!: string;\n  @Prop({ required: true }) authorUsername!: string;\n\n  get articleDate(): string {\n    return DateUtils.yearMonthDayWeekdayFormat(this.createdAt);\n  }\n}\n\n[Props]: createdAt, authorImage, authorUsername\n[Methods]: articleDate\n[Emits]: 없음"
  },
  {
    "filePath": "../repo/vue-ts-realworld-app/src/components/ArticleComments.vue",
    "template": "<div>\n    <common-loader v-if=\"isLoading\" />\n    <template v-else>\n      <comment-add :slug=\"slug\" @comment-added=\"refreshComments\" />\n      <comment-display\n        v-for=\"comment in comments\"\n        :key=\"comment.id\"\n        :comment=\"comment\"\n        :slug=\"slug\"\n        @comment-deleted=\"refreshComments\"\n      />",
    "script": "import { Component, Prop, Vue, Watch } from \"vue-property-decorator\";\n\nimport CommentAdd from \"@/components/CommentAdd.vue\";\nimport CommentDisplay from \"@/components/CommentDisplay.vue\";\nimport CommonLoader from \"@/components/CommonLoader.vue\";\nimport { IComment } from \"@/services/realWorldApi/models\";\nimport Article from \"@/store/modules/Article\";\n\n@Component({ components: { CommonLoader, CommentAdd, CommentDisplay } })\nexport default class ArticleComments extends Vue {\n  @Prop({ required: true }) slug!: string;\n\n  comments: IComment[] = [];\n  isLoading = false;\n\n  refreshComments(): void {\n    const comments: IComment[] = [];\n    Object.values(Article.commentsCache[this.slug] || [])?.forEach(comment => {\n      if (Article.commentsCache[this.slug]?.[comment.id]) {\n        comments.push(Article.commentsCache[this.slug][comment.id]);\n      }\n    });\n    comments.sort((a, b) => (a.createdAt > b.createdAt ? 1 : -1));\n    this.comments = comments;\n  }\n\n  @Watch(\"slug\", { immediate: true })\n  async onSlugChange(slug: string): Promise<void> {\n    this.isLoading = true;\n    try {\n      if (slug) {\n        await Article.fetchComments(slug);\n        this.refreshComments();\n      }\n    } finally {\n      this.isLoading = false;\n    }\n  }\n}",
    "className": "ArticleComments",
    "methods": [
      "refreshComments",
      "forEach",
      "onSlugChange",
      "if"
    ],
    "properties": [
      "slug"
    ],
    "emits": [],
    "embeddingText": "Vue 컴포넌트 이름: ArticleComments\n파일 경로: ../repo/vue-ts-realworld-app/src/components/ArticleComments.vue\n\n[Template HTML]\n<div>\n    <common-loader v-if=\"isLoading\" />\n    <template v-else>\n      <comment-add :slug=\"slug\" @comment-added=\"refreshComments\" />\n      <comment-display\n        v-for=\"comment in comments\"\n        :key=\"comment.id\"\n        :comment=\"comment\"\n        :slug=\"slug\"\n        @comment-deleted=\"refreshComments\"\n      />\n\n[Script Code]\nimport { Component, Prop, Vue, Watch } from \"vue-property-decorator\";\n\nimport CommentAdd from \"@/components/CommentAdd.vue\";\nimport CommentDisplay from \"@/components/CommentDisplay.vue\";\nimport CommonLoader from \"@/components/CommonLoader.vue\";\nimport { IComment } from \"@/services/realWorldApi/models\";\nimport Article from \"@/store/modules/Article\";\n\n@Component({ components: { CommonLoader, CommentAdd, CommentDisplay } })\nexport default class ArticleComments extends Vue {\n  @Prop({ required: true }) slug!: string;\n\n  comments: IComment[] = [];\n  isLoading = false;\n\n  refreshComments(): void {\n    const comments: IComment[] = [];\n    Object.values(Article.commentsCache[this.slug] || [])?.forEach(comment => {\n      if (Article.commentsCache[this.slug]?.[comment.id]) {\n        comments.push(Article.commentsCache[this.slug][comment.id]);\n      }\n    });\n    comments.sort((a, b) => (a.createdAt > b.createdAt ? 1 : -1));\n    this.comments = comments;\n  }\n\n  @Watch(\"slug\", { immediate: true })\n  async onSlugChange(slug: string): Promise<void> {\n    this.isLoading = true;\n    try {\n      if (slug) {\n        await Article.fetchComments(slug);\n        this.refreshComments();\n      }\n    } finally {\n      this.isLoading = false;\n    }\n  }\n}\n\n[Props]: slug\n[Methods]: refreshComments, forEach, onSlugChange, if\n[Emits]: 없음"
  },
  {
    "filePath": "../repo/vue-ts-realworld-app/src/components/ArticleEditor.vue",
    "template": "<div class=\"editor-page\">\n    <div class=\"container page\">\n      <div class=\"row\">\n        <div class=\"col-md-10 offset-md-1 col-xs-12\">\n          <common-errors-list :errors=\"errors\" />\n\n          <form>\n            <fieldset :disabled=\"isLoading\">\n              <fieldset class=\"form-group\">\n                <input\n                  v-model=\"title\"\n                  type=\"text\"\n                  class=\"form-control form-control-lg\"\n                  placeholder=\"Article Title\"\n                  required=\"true\"\n                />\n              </fieldset>\n              <fieldset class=\"form-group\">\n                <input\n                  v-model=\"description\"\n                  type=\"text\"\n                  class=\"form-control\"\n                  placeholder=\"What's this article about?\"\n                  required=\"true\"\n                />\n              </fieldset>\n              <fieldset class=\"form-group\">\n                <textarea\n                  v-model=\"body\"\n                  class=\"form-control\"\n                  rows=\"8\"\n                  placeholder=\"Write your article (in markdown)\"\n                  required=\"true\"\n                ></textarea>\n              </fieldset>\n              <fieldset class=\"form-group\">\n                <input\n                  v-model=\"tagList\"\n                  type=\"text\"\n                  class=\"form-control\"\n                  placeholder=\"Enter tags\"\n                  required=\"true\"\n                />\n                <div class=\"tag-list\">\n                  <span\n                    v-for=\"tag in existingTagList\"\n                    :key=\"tag\"\n                    class=\"tag-default tag-pill ng-binding ng-scope\"\n                  >\n                    <i class=\"ion-close-round\" @click=\"removeTag(tag)\"></i>\n                    {{ tag }}\n                  </span>\n                </div>\n              </fieldset>\n              <button\n                class=\"btn btn-lg pull-xs-right btn-primary\"\n                type=\"button\"\n                @click=\"publish\"\n              >\n                Publish Article\n              </button>\n            </fieldset>\n          </form>\n        </div>\n      </div>\n    </div>\n  </div>",
    "script": "import { Component, Prop, Vue } from \"vue-property-decorator\";\n\nimport CommonErrorsList from \"@/components/CommonErrorsList.vue\";\nimport { IArticle } from \"@/services/realWorldApi/models\";\nimport Article from \"@/store/modules/Article\";\nimport { isArrayOfStrings } from \"@/utils/ArrayUtils\";\nimport { notifySuccess } from \"@/utils/NotificationUtils\";\n\n@Component({\n  components: {\n    CommonErrorsList\n  }\n})\nexport default class ArticleEditor extends Vue {\n  @Prop() readonly article: IArticle | undefined;\n\n  isLoading = false;\n  title = this.article?.title || \"\";\n  description = this.article?.description || \"\";\n  body = this.article?.body || \"\";\n  tagList = \"\";\n  existingTagList: string[] = this.article?.tagList?.slice() || [];\n  errors: string[] = [];\n\n  removeTag(tag: string): void {\n    const index = this.existingTagList.indexOf(tag);\n    this.existingTagList.splice(index, 1);\n  }\n\n  async publish(): Promise<void> {\n    this.errors = [];\n\n    this.isLoading = true;\n    try {\n      let article;\n      if (this.article) {\n        let newTagsList = this.existingTagList.slice();\n        if (this.tagList.length > 0) {\n          newTagsList = newTagsList.concat(this.tagList.split(\",\"));\n        }\n        article = await Article.update({\n          slug: this.article.slug,\n          params: {\n            title: this.title,\n            description: this.description,\n            body: this.body,\n            tagList: newTagsList\n          }\n        });\n        notifySuccess(\"Article was successfully edited, redirecting...\");\n      } else {\n        article = await Article.create({\n          title: this.title,\n          body: this.body,\n          tagList: this.tagList.split(\",\"),\n          description: this.description\n        });\n        notifySuccess(\"Article was successfully created, redirecting...\");\n      }\n\n      this.$router.push({\n        name: this.$routesNames.articleView,\n        params: { slug: article.slug }\n      });\n    } catch (e) {\n      if (isArrayOfStrings(e)) {\n        this.errors = e;\n      } else {\n        throw e;\n      }\n    } finally {\n      this.isLoading = false;\n    }\n  }\n}",
    "className": "ArticleEditor",
    "methods": [
      "removeTag",
      "publish",
      "if",
      "if",
      "catch"
    ],
    "properties": [],
    "emits": [],
    "embeddingText": "Vue 컴포넌트 이름: ArticleEditor\n파일 경로: ../repo/vue-ts-realworld-app/src/components/ArticleEditor.vue\n\n[Template HTML]\n<div class=\"editor-page\">\n    <div class=\"container page\">\n      <div class=\"row\">\n        <div class=\"col-md-10 offset-md-1 col-xs-12\">\n          <common-errors-list :errors=\"errors\" />\n\n          <form>\n            <fieldset :disabled=\"isLoading\">\n              <fieldset class=\"form-group\">\n                <input\n                  v-model=\"title\"\n                  type=\"text\"\n                  class=\"form-control form-control-lg\"\n                  placeholder=\"Article Title\"\n                  required=\"true\"\n                />\n              </fieldset>\n              <fieldset class=\"form-group\">\n                <input\n                  v-model=\"description\"\n                  type=\"text\"\n                  class=\"form-control\"\n                  placeholder=\"What's this article about?\"\n                  required=\"true\"\n                />\n              </fieldset>\n              <fieldset class=\"form-group\">\n                <textarea\n                  v-model=\"body\"\n                  class=\"form-control\"\n                  rows=\"8\"\n                  placeholder=\"Write your article (in markdown)\"\n                  required=\"true\"\n                ></textarea>\n              </fieldset>\n              <fieldset class=\"form-group\">\n                <input\n                  v-model=\"tagList\"\n                  type=\"text\"\n                  class=\"form-control\"\n                  placeholder=\"Enter tags\"\n                  required=\"true\"\n                />\n                <div class=\"tag-list\">\n                  <span\n                    v-for=\"tag in existingTagList\"\n                    :key=\"tag\"\n                    class=\"tag-default tag-pill ng-binding ng-scope\"\n                  >\n                    <i class=\"ion-close-round\" @click=\"removeTag(tag)\"></i>\n                    {{ tag }}\n                  </span>\n                </div>\n              </fieldset>\n              <button\n                class=\"btn btn-lg pull-xs-right btn-primary\"\n                type=\"button\"\n                @click=\"publish\"\n              >\n                Publish Article\n              </button>\n            </fieldset>\n          </form>\n        </div>\n      </div>\n    </div>\n  </div>\n\n[Script Code]\nimport { Component, Prop, Vue } from \"vue-property-decorator\";\n\nimport CommonErrorsList from \"@/components/CommonErrorsList.vue\";\nimport { IArticle } from \"@/services/realWorldApi/models\";\nimport Article from \"@/store/modules/Article\";\nimport { isArrayOfStrings } from \"@/utils/ArrayUtils\";\nimport { notifySuccess } from \"@/utils/NotificationUtils\";\n\n@Component({\n  components: {\n    CommonErrorsList\n  }\n})\nexport default class ArticleEditor extends Vue {\n  @Prop() readonly article: IArticle | undefined;\n\n  isLoading = false;\n  title = this.article?.title || \"\";\n  description = this.article?.description || \"\";\n  body = this.article?.body || \"\";\n  tagList = \"\";\n  existingTagList: string[] = this.article?.tagList?.slice() || [];\n  errors: string[] = [];\n\n  removeTag(tag: string): void {\n    const index = this.existingTagList.indexOf(tag);\n    this.existingTagList.splice(index, 1);\n  }\n\n  async publish(): Promise<void> {\n    this.errors = [];\n\n    this.isLoading = true;\n    try {\n      let article;\n      if (this.article) {\n        let newTagsList = this.existingTagList.slice();\n        if (this.tagList.length > 0) {\n          newTagsList = newTagsList.concat(this.tagList.split(\",\"));\n        }\n        article = await Article.update({\n          slug: this.article.slug,\n          params: {\n            title: this.title,\n            description: this.description,\n            body: this.body,\n            tagList: newTagsList\n          }\n        });\n        notifySuccess(\"Article was successfully edited, redirecting...\");\n      } else {\n        article = await Article.create({\n          title: this.title,\n          body: this.body,\n          tagList: this.tagList.split(\",\"),\n          description: this.description\n        });\n        notifySuccess(\"Article was successfully created, redirecting...\");\n      }\n\n      this.$router.push({\n        name: this.$routesNames.articleView,\n        params: { slug: article.slug }\n      });\n    } catch (e) {\n      if (isArrayOfStrings(e)) {\n        this.errors = e;\n      } else {\n        throw e;\n      }\n    } finally {\n      this.isLoading = false;\n    }\n  }\n}\n\n[Props]: 없음\n[Methods]: removeTag, publish, if, if, catch\n[Emits]: 없음"
  },
  {
    "filePath": "../repo/vue-ts-realworld-app/src/components/AuthPage.vue",
    "template": "<div class=\"auth-page\">\n    <div class=\"container page\">\n      <div class=\"row\">\n        <div class=\"col-md-6 offset-md-3 col-xs-12\">\n          <h1 class=\"text-xs-center\">Sign up</h1>\n          <p class=\"text-xs-center\">\n            <router-link\n              v-if=\"isRegisterMode\"\n              :to=\"{ name: $routesNames.authLogin }\"\n            >\n              Have an account?\n            </router-link>\n            <router-link v-else :to=\"{ name: $routesNames.authRegister }\">\n              Need an account?\n            </router-link>\n          </p>\n\n          <common-errors-list :errors=\"errors\" />\n\n          <form>\n            <fieldset :disabled=\"isLoading\">\n              <fieldset v-if=\"isRegisterMode\" class=\"form-group\">\n                <input\n                  v-model=\"username\"\n                  class=\"form-control form-control-lg\"\n                  type=\"text\"\n                  placeholder=\"Your Name\"\n                  required=\"true\"\n                />\n              </fieldset>\n              <fieldset class=\"form-group\">\n                <input\n                  v-model=\"email\"\n                  class=\"form-control form-control-lg\"\n                  type=\"text\"\n                  placeholder=\"Email\"\n                  required=\"true\"\n                />\n              </fieldset>\n              <fieldset class=\"form-group\">\n                <input\n                  v-model=\"password\"\n                  class=\"form-control form-control-lg\"\n                  type=\"password\"\n                  placeholder=\"Password\"\n                  required=\"true\"\n                />\n              </fieldset>\n            </fieldset>\n            <common-loader\n              v-if=\"isLoading\"\n              :size=\"5\"\n              :margin=\"0\"\n              class=\"pull-xs-right\"\n            />\n            <button\n              v-else\n              class=\"btn btn-lg btn-primary pull-xs-right\"\n              @click=\"authAction\"\n            >\n              {{ isRegisterMode ? \"Sign up\" : \"Sign in\" }}\n            </button>\n          </form>\n        </div>\n      </div>\n    </div>\n  </div>",
    "script": "import { Component, Prop, Vue } from \"vue-property-decorator\";\n\nimport CommonErrorsList from \"@/components/CommonErrorsList.vue\";\nimport CommonLoader from \"@/components/CommonLoader.vue\";\nimport User from \"@/store/modules/User\";\nimport { isArrayOfStrings } from \"@/utils/ArrayUtils\";\n\nexport enum AuthPageMode {\n  Register = \"Register\",\n  Login = \"Login\"\n}\n\n@Component({\n  components: {\n    CommonLoader,\n    CommonErrorsList\n  }\n})\nexport default class AuthPage extends Vue {\n  @Prop({ required: true }) mode!: AuthPageMode;\n\n  isLoading = false;\n\n  username = \"\";\n  email = \"\";\n  password = \"\";\n\n  errors?: string[] = [];\n\n  mounted(): void {\n    this.errors = [];\n  }\n\n  get hasErrors(): boolean {\n    return !!this.errors?.length;\n  }\n\n  get isRegisterMode(): boolean {\n    return this.mode === AuthPageMode.Register;\n  }\n\n  async authAction(): Promise<void> {\n    this.errors = [];\n\n    this.isLoading = true;\n    try {\n      this.isRegisterMode\n        ? await User.register({\n            email: this.email,\n            password: this.password,\n            username: this.username\n          })\n        : await User.login({ email: this.email, password: this.password });\n      this.$router.push({ name: this.$routesNames.home });\n    } catch (e) {\n      if (isArrayOfStrings(e)) {\n        this.errors = e;\n      } else {\n        throw e;\n      }\n    } finally {\n      this.isLoading = false;\n    }\n  }\n}",
    "className": "AuthPage",
    "methods": [
      "mounted",
      "hasErrors",
      "isRegisterMode",
      "authAction",
      "register",
      "catch"
    ],
    "properties": [
      "mode"
    ],
    "emits": [],
    "embeddingText": "Vue 컴포넌트 이름: AuthPage\n파일 경로: ../repo/vue-ts-realworld-app/src/components/AuthPage.vue\n\n[Template HTML]\n<div class=\"auth-page\">\n    <div class=\"container page\">\n      <div class=\"row\">\n        <div class=\"col-md-6 offset-md-3 col-xs-12\">\n          <h1 class=\"text-xs-center\">Sign up</h1>\n          <p class=\"text-xs-center\">\n            <router-link\n              v-if=\"isRegisterMode\"\n              :to=\"{ name: $routesNames.authLogin }\"\n            >\n              Have an account?\n            </router-link>\n            <router-link v-else :to=\"{ name: $routesNames.authRegister }\">\n              Need an account?\n            </router-link>\n          </p>\n\n          <common-errors-list :errors=\"errors\" />\n\n          <form>\n            <fieldset :disabled=\"isLoading\">\n              <fieldset v-if=\"isRegisterMode\" class=\"form-group\">\n                <input\n                  v-model=\"username\"\n                  class=\"form-control form-control-lg\"\n                  type=\"text\"\n                  placeholder=\"Your Name\"\n                  required=\"true\"\n                />\n              </fieldset>\n              <fieldset class=\"form-group\">\n                <input\n                  v-model=\"email\"\n                  class=\"form-control form-control-lg\"\n                  type=\"text\"\n                  placeholder=\"Email\"\n                  required=\"true\"\n                />\n              </fieldset>\n              <fieldset class=\"form-group\">\n                <input\n                  v-model=\"password\"\n                  class=\"form-control form-control-lg\"\n                  type=\"password\"\n                  placeholder=\"Password\"\n                  required=\"true\"\n                />\n              </fieldset>\n            </fieldset>\n            <common-loader\n              v-if=\"isLoading\"\n              :size=\"5\"\n              :margin=\"0\"\n              class=\"pull-xs-right\"\n            />\n            <button\n              v-else\n              class=\"btn btn-lg btn-primary pull-xs-right\"\n              @click=\"authAction\"\n            >\n              {{ isRegisterMode ? \"Sign up\" : \"Sign in\" }}\n            </button>\n          </form>\n        </div>\n      </div>\n    </div>\n  </div>\n\n[Script Code]\nimport { Component, Prop, Vue } from \"vue-property-decorator\";\n\nimport CommonErrorsList from \"@/components/CommonErrorsList.vue\";\nimport CommonLoader from \"@/components/CommonLoader.vue\";\nimport User from \"@/store/modules/User\";\nimport { isArrayOfStrings } from \"@/utils/ArrayUtils\";\n\nexport enum AuthPageMode {\n  Register = \"Register\",\n  Login = \"Login\"\n}\n\n@Component({\n  components: {\n    CommonLoader,\n    CommonErrorsList\n  }\n})\nexport default class AuthPage extends Vue {\n  @Prop({ required: true }) mode!: AuthPageMode;\n\n  isLoading = false;\n\n  username = \"\";\n  email = \"\";\n  password = \"\";\n\n  errors?: string[] = [];\n\n  mounted(): void {\n    this.errors = [];\n  }\n\n  get hasErrors(): boolean {\n    return !!this.errors?.length;\n  }\n\n  get isRegisterMode(): boolean {\n    return this.mode === AuthPageMode.Register;\n  }\n\n  async authAction(): Promise<void> {\n    this.errors = [];\n\n    this.isLoading = true;\n    try {\n      this.isRegisterMode\n        ? await User.register({\n            email: this.email,\n            password: this.password,\n            username: this.username\n          })\n        : await User.login({ email: this.email, password: this.password });\n      this.$router.push({ name: this.$routesNames.home });\n    } catch (e) {\n      if (isArrayOfStrings(e)) {\n        this.errors = e;\n      } else {\n        throw e;\n      }\n    } finally {\n      this.isLoading = false;\n    }\n  }\n}\n\n[Props]: mode\n[Methods]: mounted, hasErrors, isRegisterMode, authAction, register, catch\n[Emits]: 없음"
  },
  {
    "filePath": "../repo/vue-ts-realworld-app/src/components/HomeBanner.vue",
    "template": "",
    "script": "import { Component, Vue } from \"vue-property-decorator\";\n\n@Component\nexport default class HomeBanner extends Vue {}",
    "className": "HomeBanner",
    "methods": [],
    "properties": [],
    "emits": [],
    "embeddingText": "Vue 컴포넌트 이름: HomeBanner\n파일 경로: ../repo/vue-ts-realworld-app/src/components/HomeBanner.vue\n\n[Template HTML]\n\n\n[Script Code]\nimport { Component, Vue } from \"vue-property-decorator\";\n\n@Component\nexport default class HomeBanner extends Vue {}\n\n[Props]: 없음\n[Methods]: 없음\n[Emits]: 없음"
  },
  {
    "filePath": "../repo/vue-ts-realworld-app/src/components/GithubCorner.vue",
    "template": "",
    "script": "import { Component, Vue } from \"vue-property-decorator\";\n\n@Component\nexport default class GithubCorner extends Vue {}",
    "className": "GithubCorner",
    "methods": [],
    "properties": [],
    "emits": [],
    "embeddingText": "Vue 컴포넌트 이름: GithubCorner\n파일 경로: ../repo/vue-ts-realworld-app/src/components/GithubCorner.vue\n\n[Template HTML]\n\n\n[Script Code]\nimport { Component, Vue } from \"vue-property-decorator\";\n\n@Component\nexport default class GithubCorner extends Vue {}\n\n[Props]: 없음\n[Methods]: 없음\n[Emits]: 없음"
  },
  {
    "filePath": "../repo/vue-ts-realworld-app/src/components/HomeTags.vue",
    "template": "<div v-if=\"isLoading\">\n    <common-loader :size=\"7\" />\n  </div>\n  <div v-else class=\"sidebar\">\n    <p>Popular Tags</p>\n\n    <div class=\"tag-list\">\n      <a\n        v-for=\"tag in tags\"\n        :key=\"tag\"\n        class=\"tag-pill tag-default\"\n        href=\"#\"\n        @click.prevent=\"selectTag(tag)\"\n      >\n        {{ tag }}\n      </a>\n    </div>\n  </div>",
    "script": "import { Component, Emit, Vue } from \"vue-property-decorator\";\n\nimport CommonLoader from \"@/components/CommonLoader.vue\";\nimport Tags from \"@/store/modules/Tags\";\n\n@Component({\n  components: { CommonLoader }\n})\nexport default class HomeTags extends Vue {\n  tags: string[] = [];\n  isLoading = false;\n\n  async mounted(): Promise<void> {\n    await this.getTags();\n  }\n\n  async getTags(): Promise<void> {\n    this.isLoading = true;\n    try {\n      this.tags = await Tags.get();\n    } finally {\n      this.isLoading = false;\n    }\n  }\n\n  @Emit(\"tag-selected\")\n  selectTag(tag: string): string {\n    return tag;\n  }\n}",
    "className": "HomeTags",
    "methods": [
      "mounted",
      "Tags",
      "selectTag"
    ],
    "properties": [],
    "emits": [],
    "embeddingText": "Vue 컴포넌트 이름: HomeTags\n파일 경로: ../repo/vue-ts-realworld-app/src/components/HomeTags.vue\n\n[Template HTML]\n<div v-if=\"isLoading\">\n    <common-loader :size=\"7\" />\n  </div>\n  <div v-else class=\"sidebar\">\n    <p>Popular Tags</p>\n\n    <div class=\"tag-list\">\n      <a\n        v-for=\"tag in tags\"\n        :key=\"tag\"\n        class=\"tag-pill tag-default\"\n        href=\"#\"\n        @click.prevent=\"selectTag(tag)\"\n      >\n        {{ tag }}\n      </a>\n    </div>\n  </div>\n\n[Script Code]\nimport { Component, Emit, Vue } from \"vue-property-decorator\";\n\nimport CommonLoader from \"@/components/CommonLoader.vue\";\nimport Tags from \"@/store/modules/Tags\";\n\n@Component({\n  components: { CommonLoader }\n})\nexport default class HomeTags extends Vue {\n  tags: string[] = [];\n  isLoading = false;\n\n  async mounted(): Promise<void> {\n    await this.getTags();\n  }\n\n  async getTags(): Promise<void> {\n    this.isLoading = true;\n    try {\n      this.tags = await Tags.get();\n    } finally {\n      this.isLoading = false;\n    }\n  }\n\n  @Emit(\"tag-selected\")\n  selectTag(tag: string): string {\n    return tag;\n  }\n}\n\n[Props]: 없음\n[Methods]: mounted, Tags, selectTag\n[Emits]: 없음"
  },
  {
    "filePath": "../repo/vue-ts-realworld-app/src/components/ArticlePreview.vue",
    "template": "<div class=\"article-preview\">\n    <article-meta\n      :author-username=\"author.username\"\n      :created-at=\"article.createdAt\"\n      :author-image=\"author.image\"\n    >\n      <article-favorites-button\n        class=\"pull-xs-right\"\n        :favorited=\"article.favorited\"\n        :favorites-count=\"article.favoritesCount\"\n        :slug=\"article.slug\"\n      />\n    </article-meta>\n    <router-link\n      :to=\"{ name: $routesNames.articleView, params: { slug: article.slug } }\"\n      href=\"\"\n      class=\"preview-link\"\n    >\n      <h1>{{ article.title }}</h1>\n      <p>{{ article.description }}</p>\n      <span>Read more...</span>\n    </router-link>\n\n    <div class=\"pull-xs-right\">\n      <span\n        v-for=\"tag in visibleTags\"\n        :key=\"tag\"\n        class=\"tag-pill tag-default tag-outline\"\n      >\n        {{ tag }}\n      </span>\n      <span v-if=\"nonVisibleTagsNumber > 0\">\n        ... and {{ nonVisibleTagsNumber }} more.\n      </span>\n    </div>\n  </div>",
    "script": "import { Component, Prop, Vue } from \"vue-property-decorator\";\n\nimport ArticleFavoritesButton from \"@/components/ArticleFavoritesButton.vue\";\nimport ArticleMeta from \"@/components/ArticleMeta.vue\";\nimport { IArticle, IProfile } from \"@/services/realWorldApi/models\";\nimport Profile from \"@/store/modules/Profile\";\n\nconst MAX_VISIBLE_TAGS = 5;\n\n@Component({\n  components: {\n    ArticleMeta,\n    ArticleFavoritesButton\n  }\n})\nexport default class ArticlePreview extends Vue {\n  @Prop({ required: true }) readonly article!: IArticle;\n\n  isLoading = false;\n\n  get visibleTags(): string[] {\n    return this.article.tagList.slice(0, MAX_VISIBLE_TAGS);\n  }\n\n  get nonVisibleTagsNumber(): number {\n    return this.article.tagList.length - MAX_VISIBLE_TAGS;\n  }\n  get author(): IProfile {\n    return (\n      Profile.profilesCache[this.article.author.username] || this.article.author\n    );\n  }\n}",
    "className": "ArticlePreview",
    "methods": [
      "visibleTags",
      "nonVisibleTagsNumber",
      "author"
    ],
    "properties": [],
    "emits": [],
    "embeddingText": "Vue 컴포넌트 이름: ArticlePreview\n파일 경로: ../repo/vue-ts-realworld-app/src/components/ArticlePreview.vue\n\n[Template HTML]\n<div class=\"article-preview\">\n    <article-meta\n      :author-username=\"author.username\"\n      :created-at=\"article.createdAt\"\n      :author-image=\"author.image\"\n    >\n      <article-favorites-button\n        class=\"pull-xs-right\"\n        :favorited=\"article.favorited\"\n        :favorites-count=\"article.favoritesCount\"\n        :slug=\"article.slug\"\n      />\n    </article-meta>\n    <router-link\n      :to=\"{ name: $routesNames.articleView, params: { slug: article.slug } }\"\n      href=\"\"\n      class=\"preview-link\"\n    >\n      <h1>{{ article.title }}</h1>\n      <p>{{ article.description }}</p>\n      <span>Read more...</span>\n    </router-link>\n\n    <div class=\"pull-xs-right\">\n      <span\n        v-for=\"tag in visibleTags\"\n        :key=\"tag\"\n        class=\"tag-pill tag-default tag-outline\"\n      >\n        {{ tag }}\n      </span>\n      <span v-if=\"nonVisibleTagsNumber > 0\">\n        ... and {{ nonVisibleTagsNumber }} more.\n      </span>\n    </div>\n  </div>\n\n[Script Code]\nimport { Component, Prop, Vue } from \"vue-property-decorator\";\n\nimport ArticleFavoritesButton from \"@/components/ArticleFavoritesButton.vue\";\nimport ArticleMeta from \"@/components/ArticleMeta.vue\";\nimport { IArticle, IProfile } from \"@/services/realWorldApi/models\";\nimport Profile from \"@/store/modules/Profile\";\n\nconst MAX_VISIBLE_TAGS = 5;\n\n@Component({\n  components: {\n    ArticleMeta,\n    ArticleFavoritesButton\n  }\n})\nexport default class ArticlePreview extends Vue {\n  @Prop({ required: true }) readonly article!: IArticle;\n\n  isLoading = false;\n\n  get visibleTags(): string[] {\n    return this.article.tagList.slice(0, MAX_VISIBLE_TAGS);\n  }\n\n  get nonVisibleTagsNumber(): number {\n    return this.article.tagList.length - MAX_VISIBLE_TAGS;\n  }\n  get author(): IProfile {\n    return (\n      Profile.profilesCache[this.article.author.username] || this.article.author\n    );\n  }\n}\n\n[Props]: 없음\n[Methods]: visibleTags, nonVisibleTagsNumber, author\n[Emits]: 없음"
  },
  {
    "filePath": "../repo/vue-ts-realworld-app/src/components/CommonPagination.vue",
    "template": "<nav>\n    <ul class=\"pagination\">\n      <li\n        v-for=\"page in pages\"\n        :key=\"page\"\n        :class=\"['page-item', { active: currentPage === page }]\"\n      >\n        <a href=\"#\" class=\"page-link\" @click.prevent=\"changePage(page)\">\n          {{ page }}\n        </a>\n      </li>\n    </ul>\n  </nav>",
    "script": "import { Component, Emit, Prop, Vue } from \"vue-property-decorator\";\n\n@Component\nexport default class CommonPagination extends Vue {\n  @Prop({ required: true }) totalItems!: number;\n  @Prop({ required: true }) itemsPerPage!: number;\n  @Prop({ required: true }) currentPage!: number;\n\n  get pages(): number[] {\n    const res = Array.from(\n      Array(Math.ceil(this.totalItems / this.itemsPerPage) + 1).keys()\n    );\n    res.shift();\n    return res;\n  }\n\n  @Emit(\"page-changed\")\n  changePage(page: number): number {\n    return page;\n  }\n}",
    "className": "CommonPagination",
    "methods": [
      "pages",
      "changePage"
    ],
    "properties": [
      "totalItems",
      "itemsPerPage",
      "currentPage"
    ],
    "emits": [],
    "embeddingText": "Vue 컴포넌트 이름: CommonPagination\n파일 경로: ../repo/vue-ts-realworld-app/src/components/CommonPagination.vue\n\n[Template HTML]\n<nav>\n    <ul class=\"pagination\">\n      <li\n        v-for=\"page in pages\"\n        :key=\"page\"\n        :class=\"['page-item', { active: currentPage === page }]\"\n      >\n        <a href=\"#\" class=\"page-link\" @click.prevent=\"changePage(page)\">\n          {{ page }}\n        </a>\n      </li>\n    </ul>\n  </nav>\n\n[Script Code]\nimport { Component, Emit, Prop, Vue } from \"vue-property-decorator\";\n\n@Component\nexport default class CommonPagination extends Vue {\n  @Prop({ required: true }) totalItems!: number;\n  @Prop({ required: true }) itemsPerPage!: number;\n  @Prop({ required: true }) currentPage!: number;\n\n  get pages(): number[] {\n    const res = Array.from(\n      Array(Math.ceil(this.totalItems / this.itemsPerPage) + 1).keys()\n    );\n    res.shift();\n    return res;\n  }\n\n  @Emit(\"page-changed\")\n  changePage(page: number): number {\n    return page;\n  }\n}\n\n[Props]: totalItems, itemsPerPage, currentPage\n[Methods]: pages, changePage\n[Emits]: 없음"
  },
  {
    "filePath": "../repo/vue-ts-realworld-app/src/components/CommentDisplay.vue",
    "template": "<div class=\"card\">\n    <div class=\"card-block\">\n      <p class=\"card-text\">\n        {{ comment.body }}\n      </p>\n    </div>\n    <div class=\"card-footer\">\n      <a href=\"\" class=\"comment-author\">\n        <img :src=\"comment.author.image\" class=\"comment-author-img\" />\n      </a>\n      &nbsp;\n      <router-link\n        :to=\"{\n          name: $routesNames.profileIndex,\n          params: { username: comment.author.username }\n        }\"\n        class=\"comment-author\"\n      >\n        {{ comment.author.username }}\n      </router-link>\n      <span class=\"date-posted\">{{ commentDate }}</span>\n      <span class=\"mod-options\">\n        <i class=\"ion-trash-a\" :disabled=\"isLoading\" @click=\"deleteComment\"></i>\n      </span>\n    </div>\n  </div>",
    "script": "import { Component, Prop, Vue } from \"vue-property-decorator\";\n\nimport { IComment } from \"@/services/realWorldApi/models\";\nimport Article from \"@/store/modules/Article\";\nimport User from \"@/store/modules/User\";\nimport DateUtils from \"@/utils/DateUtils\";\n\n@Component\nexport default class CommentDisplay extends Vue {\n  @Prop({ required: true }) comment!: IComment;\n  @Prop({ required: true }) slug!: string;\n\n  isLoading = false;\n\n  get commentDate(): string {\n    return DateUtils.yearMonthDayWeekdayFormat(this.comment.createdAt);\n  }\n\n  get isMyComment(): boolean {\n    return User.currentUser?.username === this.comment.author.username;\n  }\n\n  async deleteComment(): Promise<void> {\n    this.isLoading = true;\n    try {\n      await Article.deleteComment({\n        slug: this.slug,\n        commentId: this.comment.id\n      });\n      this.$emit(\"comment-deleted\");\n    } finally {\n      this.isLoading = false;\n    }\n  }\n}",
    "className": "CommentDisplay",
    "methods": [
      "commentDate",
      "isMyComment",
      "deleteComment"
    ],
    "properties": [
      "comment",
      "slug"
    ],
    "emits": [
      "comment-deleted"
    ],
    "embeddingText": "Vue 컴포넌트 이름: CommentDisplay\n파일 경로: ../repo/vue-ts-realworld-app/src/components/CommentDisplay.vue\n\n[Template HTML]\n<div class=\"card\">\n    <div class=\"card-block\">\n      <p class=\"card-text\">\n        {{ comment.body }}\n      </p>\n    </div>\n    <div class=\"card-footer\">\n      <a href=\"\" class=\"comment-author\">\n        <img :src=\"comment.author.image\" class=\"comment-author-img\" />\n      </a>\n      &nbsp;\n      <router-link\n        :to=\"{\n          name: $routesNames.profileIndex,\n          params: { username: comment.author.username }\n        }\"\n        class=\"comment-author\"\n      >\n        {{ comment.author.username }}\n      </router-link>\n      <span class=\"date-posted\">{{ commentDate }}</span>\n      <span class=\"mod-options\">\n        <i class=\"ion-trash-a\" :disabled=\"isLoading\" @click=\"deleteComment\"></i>\n      </span>\n    </div>\n  </div>\n\n[Script Code]\nimport { Component, Prop, Vue } from \"vue-property-decorator\";\n\nimport { IComment } from \"@/services/realWorldApi/models\";\nimport Article from \"@/store/modules/Article\";\nimport User from \"@/store/modules/User\";\nimport DateUtils from \"@/utils/DateUtils\";\n\n@Component\nexport default class CommentDisplay extends Vue {\n  @Prop({ required: true }) comment!: IComment;\n  @Prop({ required: true }) slug!: string;\n\n  isLoading = false;\n\n  get commentDate(): string {\n    return DateUtils.yearMonthDayWeekdayFormat(this.comment.createdAt);\n  }\n\n  get isMyComment(): boolean {\n    return User.currentUser?.username === this.comment.author.username;\n  }\n\n  async deleteComment(): Promise<void> {\n    this.isLoading = true;\n    try {\n      await Article.deleteComment({\n        slug: this.slug,\n        commentId: this.comment.id\n      });\n      this.$emit(\"comment-deleted\");\n    } finally {\n      this.isLoading = false;\n    }\n  }\n}\n\n[Props]: comment, slug\n[Methods]: commentDate, isMyComment, deleteComment\n[Emits]: comment-deleted"
  },
  {
    "filePath": "../repo/vue-ts-realworld-app/src/components/CommentAdd.vue",
    "template": "<div v-if=\"!isLoggedIn\">\n    <router-link :to=\"{ name: $routesNames.authLogin }\">Sign in</router-link>\n    or\n    <router-link :to=\"{ name: $routesNames.authRegister }\">sign up</router-link>\n    to add comments on this article.\n  </div>\n  <div v-else>\n    <common-errors-list :errors=\"errors\" />\n    <form class=\"card comment-form\">\n      <div class=\"card-block\">\n        <textarea\n          v-model=\"body\"\n          :disabled=\"isLoading\"\n          class=\"form-control\"\n          placeholder=\"Write a comment...\"\n          rows=\"3\"\n        ></textarea>\n      </div>\n      <div class=\"card-footer\">\n        <img :src=\"userImage\" class=\"comment-author-img\" />\n        <button\n          class=\"btn btn-sm btn-primary\"\n          :disabled=\"isLoading\"\n          @click=\"addComment\"\n        >\n          Post Comment\n        </button>\n      </div>\n    </form>\n  </div>",
    "script": "import { Component, Prop, Vue } from \"vue-property-decorator\";\n\nimport CommonErrorsList from \"@/components/CommonErrorsList.vue\";\nimport Article from \"@/store/modules/Article\";\nimport User from \"@/store/modules/User\";\nimport { isArrayOfStrings } from \"@/utils/ArrayUtils\";\nimport { notifySuccess } from \"@/utils/NotificationUtils\";\n\n@Component({ components: { CommonErrorsList } })\nexport default class CommentAdd extends Vue {\n  @Prop({ required: true }) slug!: string;\n\n  body = \"\";\n  errors: string[] = [];\n  isLoading = false;\n\n  get userImage(): string | null | undefined {\n    return User.currentUser?.image;\n  }\n\n  get isLoggedIn(): boolean {\n    return User.isLoggedIn;\n  }\n\n  async addComment(): Promise<void> {\n    this.errors = [];\n\n    this.isLoading = true;\n    try {\n      await Article.addComment({\n        slug: this.slug,\n        params: { body: this.body }\n      });\n      this.$emit(\"comment-added\");\n      this.body = \"\";\n      notifySuccess(\"Comment is added sucessfully\");\n    } catch (e) {\n      if (isArrayOfStrings(e)) {\n        this.errors = e;\n      } else {\n        throw e;\n      }\n    } finally {\n      this.isLoading = false;\n    }\n  }\n}",
    "className": "CommentAdd",
    "methods": [
      "userImage",
      "isLoggedIn",
      "addComment",
      "catch"
    ],
    "properties": [
      "slug"
    ],
    "emits": [
      "comment-added"
    ],
    "embeddingText": "Vue 컴포넌트 이름: CommentAdd\n파일 경로: ../repo/vue-ts-realworld-app/src/components/CommentAdd.vue\n\n[Template HTML]\n<div v-if=\"!isLoggedIn\">\n    <router-link :to=\"{ name: $routesNames.authLogin }\">Sign in</router-link>\n    or\n    <router-link :to=\"{ name: $routesNames.authRegister }\">sign up</router-link>\n    to add comments on this article.\n  </div>\n  <div v-else>\n    <common-errors-list :errors=\"errors\" />\n    <form class=\"card comment-form\">\n      <div class=\"card-block\">\n        <textarea\n          v-model=\"body\"\n          :disabled=\"isLoading\"\n          class=\"form-control\"\n          placeholder=\"Write a comment...\"\n          rows=\"3\"\n        ></textarea>\n      </div>\n      <div class=\"card-footer\">\n        <img :src=\"userImage\" class=\"comment-author-img\" />\n        <button\n          class=\"btn btn-sm btn-primary\"\n          :disabled=\"isLoading\"\n          @click=\"addComment\"\n        >\n          Post Comment\n        </button>\n      </div>\n    </form>\n  </div>\n\n[Script Code]\nimport { Component, Prop, Vue } from \"vue-property-decorator\";\n\nimport CommonErrorsList from \"@/components/CommonErrorsList.vue\";\nimport Article from \"@/store/modules/Article\";\nimport User from \"@/store/modules/User\";\nimport { isArrayOfStrings } from \"@/utils/ArrayUtils\";\nimport { notifySuccess } from \"@/utils/NotificationUtils\";\n\n@Component({ components: { CommonErrorsList } })\nexport default class CommentAdd extends Vue {\n  @Prop({ required: true }) slug!: string;\n\n  body = \"\";\n  errors: string[] = [];\n  isLoading = false;\n\n  get userImage(): string | null | undefined {\n    return User.currentUser?.image;\n  }\n\n  get isLoggedIn(): boolean {\n    return User.isLoggedIn;\n  }\n\n  async addComment(): Promise<void> {\n    this.errors = [];\n\n    this.isLoading = true;\n    try {\n      await Article.addComment({\n        slug: this.slug,\n        params: { body: this.body }\n      });\n      this.$emit(\"comment-added\");\n      this.body = \"\";\n      notifySuccess(\"Comment is added sucessfully\");\n    } catch (e) {\n      if (isArrayOfStrings(e)) {\n        this.errors = e;\n      } else {\n        throw e;\n      }\n    } finally {\n      this.isLoading = false;\n    }\n  }\n}\n\n[Props]: slug\n[Methods]: userImage, isLoggedIn, addComment, catch\n[Emits]: comment-added"
  },
  {
    "filePath": "../repo/vue-ts-realworld-app/src/components/ArticleFavoritesButton.vue",
    "template": "<button\n    :class=\"['btn btn-sm', favorited ? 'btn-primary' : 'btn-outline-primary']\"\n    :disabled=\"isLoading\"\n    @click=\"toggleFavorites\"\n  >\n    <i class=\"ion-heart\"></i>\n    &nbsp;\n    <template v-if=\"isWithDescription\">\n      {{ favorited ? \"Unfavorite Article\" : \"Favorite Article\" }}\n      <span class=\"counter\">({{ favoritesCount }})</span>",
    "script": "import { Component, Prop, Vue } from \"vue-property-decorator\";\n\nimport Article from \"@/store/modules/Article\";\n\n@Component\nexport default class ArticleFavoritesButton extends Vue {\n  @Prop({ required: true }) favoritesCount!: number;\n  @Prop({ required: true }) favorited!: boolean;\n  @Prop({ required: true }) slug!: string;\n  @Prop({ default: false }) isWithDescription!: boolean;\n\n  isLoading = false;\n\n  async toggleFavorites(): Promise<void> {\n    this.isLoading = true;\n    try {\n      this.favorited\n        ? await Article.removeFromFavorites(this.slug)\n        : await Article.addToFavorites(this.slug);\n    } finally {\n      this.isLoading = false;\n    }\n  }\n}",
    "className": "ArticleFavoritesButton",
    "methods": [
      "toggleFavorites",
      "removeFromFavorites"
    ],
    "properties": [
      "slug",
      "favorited",
      "isWithDescription",
      "favoritesCount"
    ],
    "emits": [],
    "embeddingText": "Vue 컴포넌트 이름: ArticleFavoritesButton\n파일 경로: ../repo/vue-ts-realworld-app/src/components/ArticleFavoritesButton.vue\n\n[Template HTML]\n<button\n    :class=\"['btn btn-sm', favorited ? 'btn-primary' : 'btn-outline-primary']\"\n    :disabled=\"isLoading\"\n    @click=\"toggleFavorites\"\n  >\n    <i class=\"ion-heart\"></i>\n    &nbsp;\n    <template v-if=\"isWithDescription\">\n      {{ favorited ? \"Unfavorite Article\" : \"Favorite Article\" }}\n      <span class=\"counter\">({{ favoritesCount }})</span>\n\n[Script Code]\nimport { Component, Prop, Vue } from \"vue-property-decorator\";\n\nimport Article from \"@/store/modules/Article\";\n\n@Component\nexport default class ArticleFavoritesButton extends Vue {\n  @Prop({ required: true }) favoritesCount!: number;\n  @Prop({ required: true }) favorited!: boolean;\n  @Prop({ required: true }) slug!: string;\n  @Prop({ default: false }) isWithDescription!: boolean;\n\n  isLoading = false;\n\n  async toggleFavorites(): Promise<void> {\n    this.isLoading = true;\n    try {\n      this.favorited\n        ? await Article.removeFromFavorites(this.slug)\n        : await Article.addToFavorites(this.slug);\n    } finally {\n      this.isLoading = false;\n    }\n  }\n}\n\n[Props]: favoritesCount, favorited, slug, isWithDescription\n[Methods]: toggleFavorites, removeFromFavorites\n[Emits]: 없음"
  },
  {
    "filePath": "../repo/vue-ts-realworld-app/src/components/ArticleViewActions.vue",
    "template": "<article-meta\n    :author-username=\"author.username\"\n    :created-at=\"article.createdAt\"\n    :author-image=\"author.image\"\n  >\n    <template v-if=\"!isMyArticle\">\n      <profile-follow-button\n        :username=\"author.username\"\n        :following=\"author.following\"\n      />\n      &nbsp;&nbsp;\n      <article-favorites-button\n        :favorited=\"article.favorited\"\n        :favorites-count=\"article.favoritesCount\"\n        :slug=\"article.slug\"\n        :is-with-description=\"true\"\n      />",
    "script": "import { Component, Emit, Prop, Vue } from \"vue-property-decorator\";\n\nimport ArticleFavoritesButton from \"@/components/ArticleFavoritesButton.vue\";\nimport ArticleMeta from \"@/components/ArticleMeta.vue\";\nimport ProfileFollowButton from \"@/components/ProfileFollowButton.vue\";\nimport { IArticle, IProfile } from \"@/services/realWorldApi/models\";\nimport Profile from \"@/store/modules/Profile\";\nimport User from \"@/store/modules/User\";\n\n@Component({\n  components: {\n    ArticleMeta,\n    ArticleFavoritesButton,\n    ProfileFollowButton\n  }\n})\nexport default class ArticleViewHeader extends Vue {\n  @Prop({ required: true }) article!: IArticle;\n\n  get author(): IProfile {\n    return (\n      Profile.profilesCache[this.article.author.username] || this.article.author\n    );\n  }\n\n  get isMyArticle(): boolean {\n    return this.article.author.username === User.currentUser?.username;\n  }\n\n  @Emit(\"delete-article\")\n  deleteArticle(): void {\n    return;\n  }\n}",
    "className": "ArticleViewHeader",
    "methods": [
      "author",
      "isMyArticle",
      "deleteArticle"
    ],
    "properties": [
      "article"
    ],
    "emits": [],
    "embeddingText": "Vue 컴포넌트 이름: ArticleViewHeader\n파일 경로: ../repo/vue-ts-realworld-app/src/components/ArticleViewActions.vue\n\n[Template HTML]\n<article-meta\n    :author-username=\"author.username\"\n    :created-at=\"article.createdAt\"\n    :author-image=\"author.image\"\n  >\n    <template v-if=\"!isMyArticle\">\n      <profile-follow-button\n        :username=\"author.username\"\n        :following=\"author.following\"\n      />\n      &nbsp;&nbsp;\n      <article-favorites-button\n        :favorited=\"article.favorited\"\n        :favorites-count=\"article.favoritesCount\"\n        :slug=\"article.slug\"\n        :is-with-description=\"true\"\n      />\n\n[Script Code]\nimport { Component, Emit, Prop, Vue } from \"vue-property-decorator\";\n\nimport ArticleFavoritesButton from \"@/components/ArticleFavoritesButton.vue\";\nimport ArticleMeta from \"@/components/ArticleMeta.vue\";\nimport ProfileFollowButton from \"@/components/ProfileFollowButton.vue\";\nimport { IArticle, IProfile } from \"@/services/realWorldApi/models\";\nimport Profile from \"@/store/modules/Profile\";\nimport User from \"@/store/modules/User\";\n\n@Component({\n  components: {\n    ArticleMeta,\n    ArticleFavoritesButton,\n    ProfileFollowButton\n  }\n})\nexport default class ArticleViewHeader extends Vue {\n  @Prop({ required: true }) article!: IArticle;\n\n  get author(): IProfile {\n    return (\n      Profile.profilesCache[this.article.author.username] || this.article.author\n    );\n  }\n\n  get isMyArticle(): boolean {\n    return this.article.author.username === User.currentUser?.username;\n  }\n\n  @Emit(\"delete-article\")\n  deleteArticle(): void {\n    return;\n  }\n}\n\n[Props]: article\n[Methods]: author, isMyArticle, deleteArticle\n[Emits]: 없음"
  },
  {
    "filePath": "../repo/vue-ts-realworld-app/src/components/ProfileFollowButton.vue",
    "template": "<button\n    :class=\"[\n      'btn btn-sm action-btn',\n      following ? 'btn-secondary' : 'btn-outline-secondary'\n    ]\"\n    :disabled=\"isLoading\"\n    @click=\"onFollowButtonClick\"\n  >\n    <i :class=\"[following ? 'ion-minus-round' : 'ion-plus-round']\"></i>\n    {{ followButtonTitle }}\n  </button>",
    "script": "import { Component, Prop, Vue } from \"vue-property-decorator\";\n\nimport Profile from \"@/store/modules/Profile\";\n\n@Component\nexport default class ProfileFollowButton extends Vue {\n  @Prop({ required: true }) following!: boolean;\n  @Prop({ required: true }) username!: string;\n\n  isLoading = false;\n\n  get followButtonTitle(): string {\n    return this.following\n      ? `Unfollow ${this.username}`\n      : `Follow ${this.username}`;\n  }\n  async onFollowButtonClick(): Promise<void> {\n    this.isLoading = true;\n    try {\n      this.following\n        ? await Profile.unFollow(this.username)\n        : await Profile.follow(this.username);\n    } finally {\n      this.isLoading = false;\n    }\n  }\n}",
    "className": "ProfileFollowButton",
    "methods": [
      "followButtonTitle",
      "onFollowButtonClick",
      "unFollow"
    ],
    "properties": [
      "username",
      "following"
    ],
    "emits": [],
    "embeddingText": "Vue 컴포넌트 이름: ProfileFollowButton\n파일 경로: ../repo/vue-ts-realworld-app/src/components/ProfileFollowButton.vue\n\n[Template HTML]\n<button\n    :class=\"[\n      'btn btn-sm action-btn',\n      following ? 'btn-secondary' : 'btn-outline-secondary'\n    ]\"\n    :disabled=\"isLoading\"\n    @click=\"onFollowButtonClick\"\n  >\n    <i :class=\"[following ? 'ion-minus-round' : 'ion-plus-round']\"></i>\n    {{ followButtonTitle }}\n  </button>\n\n[Script Code]\nimport { Component, Prop, Vue } from \"vue-property-decorator\";\n\nimport Profile from \"@/store/modules/Profile\";\n\n@Component\nexport default class ProfileFollowButton extends Vue {\n  @Prop({ required: true }) following!: boolean;\n  @Prop({ required: true }) username!: string;\n\n  isLoading = false;\n\n  get followButtonTitle(): string {\n    return this.following\n      ? `Unfollow ${this.username}`\n      : `Follow ${this.username}`;\n  }\n  async onFollowButtonClick(): Promise<void> {\n    this.isLoading = true;\n    try {\n      this.following\n        ? await Profile.unFollow(this.username)\n        : await Profile.follow(this.username);\n    } finally {\n      this.isLoading = false;\n    }\n  }\n}\n\n[Props]: following, username\n[Methods]: followButtonTitle, onFollowButtonClick, unFollow\n[Emits]: 없음"
  },
  {
    "filePath": "../repo/vue-ts-realworld-app/src/components/CommonFeed.vue",
    "template": "<div>\n    <div class=\"feed-toggle\">\n      <ul class=\"nav nav-pills outline-active\">\n        <li v-for=\"tab in tabs\" :key=\"tab.id\" class=\"nav-item\">\n          <a\n            :class=\"['nav-link', { active: activeTabId === tab.id }]\"\n            href=\"#\"\n            @click.prevent=\"onTabChanged(tab.id)\"\n          >\n            {{ tab.title }}\n          </a>\n        </li>\n      </ul>\n    </div>\n\n    <common-loader v-if=\"isLoading\" />\n\n    <article-preview\n      v-for=\"article in articles\"\n      v-else\n      :key=\"article.slug\"\n      :article=\"article\"\n    />\n\n    <div v-if=\"feed.articlesCount === 0 && !isLoading\" class=\"article-preview\">\n      No articles are here... yet.\n    </div>\n\n    <common-pagination\n      v-show=\"!isLoading\"\n      :total-items=\"feed.articlesCount\"\n      :items-per-page=\"itemsPerPage\"\n      :current-page=\"currentPage\"\n      @page-changed=\"onPageChanged\"\n    />\n  </div>",
    "script": "import { Component, Emit, Prop, Vue } from \"vue-property-decorator\";\n\nimport ArticlePreview from \"@/components/ArticlePreview.vue\";\nimport CommonLoader from \"@/components/CommonLoader.vue\";\nimport CommonPagination from \"@/components/CommonPagination.vue\";\nimport { IArticle, IArticleList } from \"@/services/realWorldApi/models\";\nimport Article from \"@/store/modules/Article\";\n\nexport interface IFeedTab {\n  id: string;\n  title: string;\n}\n\n@Component({\n  components: {\n    CommonLoader,\n    ArticlePreview,\n    CommonPagination\n  }\n})\nexport default class CommonFeed extends Vue {\n  @Prop({ required: true }) tabs!: IFeedTab[];\n  @Prop({ default: \"\" }) activeTabId!: string;\n  @Prop({ default: false }) isLoading!: boolean;\n  @Prop({ required: true }) feed!: IArticleList;\n  @Prop({ required: true }) itemsPerPage!: number;\n  @Prop({ required: true }) currentPage!: number;\n\n  get articlesCache(): Record<string, IArticle> {\n    return Article.articlesCache;\n  }\n\n  get articles(): IArticle[] {\n    return this.feed.articles.map(\n      article => this.articlesCache[article.slug] || article\n    );\n  }\n\n  @Emit(\"tab-changed\")\n  onTabChanged(tabId: string): string {\n    return tabId;\n  }\n  @Emit(\"page-changed\")\n  onPageChanged(page: number): number {\n    return page;\n  }\n}",
    "className": "CommonFeed",
    "methods": [
      "articlesCache",
      "articles",
      "onTabChanged",
      "onPageChanged"
    ],
    "properties": [
      "activeTabId",
      "currentPage",
      "itemsPerPage",
      "tabs",
      "isLoading",
      "feed"
    ],
    "emits": [],
    "embeddingText": "Vue 컴포넌트 이름: CommonFeed\n파일 경로: ../repo/vue-ts-realworld-app/src/components/CommonFeed.vue\n\n[Template HTML]\n<div>\n    <div class=\"feed-toggle\">\n      <ul class=\"nav nav-pills outline-active\">\n        <li v-for=\"tab in tabs\" :key=\"tab.id\" class=\"nav-item\">\n          <a\n            :class=\"['nav-link', { active: activeTabId === tab.id }]\"\n            href=\"#\"\n            @click.prevent=\"onTabChanged(tab.id)\"\n          >\n            {{ tab.title }}\n          </a>\n        </li>\n      </ul>\n    </div>\n\n    <common-loader v-if=\"isLoading\" />\n\n    <article-preview\n      v-for=\"article in articles\"\n      v-else\n      :key=\"article.slug\"\n      :article=\"article\"\n    />\n\n    <div v-if=\"feed.articlesCount === 0 && !isLoading\" class=\"article-preview\">\n      No articles are here... yet.\n    </div>\n\n    <common-pagination\n      v-show=\"!isLoading\"\n      :total-items=\"feed.articlesCount\"\n      :items-per-page=\"itemsPerPage\"\n      :current-page=\"currentPage\"\n      @page-changed=\"onPageChanged\"\n    />\n  </div>\n\n[Script Code]\nimport { Component, Emit, Prop, Vue } from \"vue-property-decorator\";\n\nimport ArticlePreview from \"@/components/ArticlePreview.vue\";\nimport CommonLoader from \"@/components/CommonLoader.vue\";\nimport CommonPagination from \"@/components/CommonPagination.vue\";\nimport { IArticle, IArticleList } from \"@/services/realWorldApi/models\";\nimport Article from \"@/store/modules/Article\";\n\nexport interface IFeedTab {\n  id: string;\n  title: string;\n}\n\n@Component({\n  components: {\n    CommonLoader,\n    ArticlePreview,\n    CommonPagination\n  }\n})\nexport default class CommonFeed extends Vue {\n  @Prop({ required: true }) tabs!: IFeedTab[];\n  @Prop({ default: \"\" }) activeTabId!: string;\n  @Prop({ default: false }) isLoading!: boolean;\n  @Prop({ required: true }) feed!: IArticleList;\n  @Prop({ required: true }) itemsPerPage!: number;\n  @Prop({ required: true }) currentPage!: number;\n\n  get articlesCache(): Record<string, IArticle> {\n    return Article.articlesCache;\n  }\n\n  get articles(): IArticle[] {\n    return this.feed.articles.map(\n      article => this.articlesCache[article.slug] || article\n    );\n  }\n\n  @Emit(\"tab-changed\")\n  onTabChanged(tabId: string): string {\n    return tabId;\n  }\n  @Emit(\"page-changed\")\n  onPageChanged(page: number): number {\n    return page;\n  }\n}\n\n[Props]: tabs, activeTabId, isLoading, feed, itemsPerPage, currentPage\n[Methods]: articlesCache, articles, onTabChanged, onPageChanged\n[Emits]: 없음"
  },
  {
    "filePath": "../repo/vue-ts-realworld-app/src/layouts/AppHeader.vue",
    "template": "<nav class=\"navbar navbar-light\">\n    <div class=\"container\">\n      <router-link :to=\"{ name: $routesNames.home }\" class=\"navbar-brand\">\n        conduit\n      </router-link>\n      <ul class=\"nav navbar-nav pull-xs-right\">\n        <li\n          v-for=\"menuItem in menuItems\"\n          :key=\"menuItem.title\"\n          class=\"nav-item\"\n        >\n          <router-link\n            :to=\"{ name: menuItem.routeName }\"\n            :exact-active-class=\"`active`\"\n            class=\"nav-link\"\n          >\n            <i v-if=\"menuItem.icon\" :class=\"menuItem.icon\"></i>\n            {{ menuItem.title }}\n          </router-link>\n        </li>\n        <template v-if=\"isLoggedIn\">\n          <li class=\"nav-item\">\n            <router-link\n              class=\"nav-link\"\n              :exact-active-class=\"`active`\"\n              :to=\"{\n                name: $routesNames.profileIndex,\n                params: { username: userName }\n              }\"\n            >\n              <img v-if=\"userImage\" :src=\"userImage\" class=\"user-pic\" />\n              {{ userName }}\n            </router-link>\n          </li>",
    "script": "import { Component, Vue } from \"vue-property-decorator\";\n\nimport User from \"@/store/modules/User\";\n\ninterface IMenuItem {\n  title: string;\n  icon?: string;\n  routeName: string;\n  isShow: boolean;\n}\n\n@Component\nexport default class AppHeader extends Vue {\n  get menuItems(): IMenuItem[] {\n    const menuItems = [\n      {\n        title: \"Home\",\n        routeName: this.$routesNames.home,\n        isShow: true\n      },\n      {\n        title: \"New Article\",\n        icon: \"ion-compose\",\n        routeName: this.$routesNames.articleCreate,\n        isShow: this.isLoggedIn\n      },\n      {\n        title: \"Settings\",\n        routeName: this.$routesNames.profileSettings,\n        icon: \"ion-gear-a\",\n        isShow: this.isLoggedIn\n      },\n      {\n        title: \"Sign up\",\n        routeName: this.$routesNames.authRegister,\n        isShow: !this.isLoggedIn\n      },\n      {\n        title: \"Sign in\",\n        routeName: this.$routesNames.authLogin,\n        isShow: !this.isLoggedIn\n      }\n    ];\n    return menuItems.filter(menuItem => menuItem.isShow);\n  }\n\n  get isLoggedIn(): boolean {\n    return User.isLoggedIn;\n  }\n\n  get userName(): string {\n    return User.currentUser?.username || \"\";\n  }\n\n  get userImage(): string | null | undefined {\n    return User.currentUser?.image;\n  }\n}",
    "className": "AppHeader",
    "methods": [
      "menuItems",
      "isLoggedIn",
      "userName",
      "userImage"
    ],
    "properties": [],
    "emits": [],
    "embeddingText": "Vue 컴포넌트 이름: AppHeader\n파일 경로: ../repo/vue-ts-realworld-app/src/layouts/AppHeader.vue\n\n[Template HTML]\n<nav class=\"navbar navbar-light\">\n    <div class=\"container\">\n      <router-link :to=\"{ name: $routesNames.home }\" class=\"navbar-brand\">\n        conduit\n      </router-link>\n      <ul class=\"nav navbar-nav pull-xs-right\">\n        <li\n          v-for=\"menuItem in menuItems\"\n          :key=\"menuItem.title\"\n          class=\"nav-item\"\n        >\n          <router-link\n            :to=\"{ name: menuItem.routeName }\"\n            :exact-active-class=\"`active`\"\n            class=\"nav-link\"\n          >\n            <i v-if=\"menuItem.icon\" :class=\"menuItem.icon\"></i>\n            {{ menuItem.title }}\n          </router-link>\n        </li>\n        <template v-if=\"isLoggedIn\">\n          <li class=\"nav-item\">\n            <router-link\n              class=\"nav-link\"\n              :exact-active-class=\"`active`\"\n              :to=\"{\n                name: $routesNames.profileIndex,\n                params: { username: userName }\n              }\"\n            >\n              <img v-if=\"userImage\" :src=\"userImage\" class=\"user-pic\" />\n              {{ userName }}\n            </router-link>\n          </li>\n\n[Script Code]\nimport { Component, Vue } from \"vue-property-decorator\";\n\nimport User from \"@/store/modules/User\";\n\ninterface IMenuItem {\n  title: string;\n  icon?: string;\n  routeName: string;\n  isShow: boolean;\n}\n\n@Component\nexport default class AppHeader extends Vue {\n  get menuItems(): IMenuItem[] {\n    const menuItems = [\n      {\n        title: \"Home\",\n        routeName: this.$routesNames.home,\n        isShow: true\n      },\n      {\n        title: \"New Article\",\n        icon: \"ion-compose\",\n        routeName: this.$routesNames.articleCreate,\n        isShow: this.isLoggedIn\n      },\n      {\n        title: \"Settings\",\n        routeName: this.$routesNames.profileSettings,\n        icon: \"ion-gear-a\",\n        isShow: this.isLoggedIn\n      },\n      {\n        title: \"Sign up\",\n        routeName: this.$routesNames.authRegister,\n        isShow: !this.isLoggedIn\n      },\n      {\n        title: \"Sign in\",\n        routeName: this.$routesNames.authLogin,\n        isShow: !this.isLoggedIn\n      }\n    ];\n    return menuItems.filter(menuItem => menuItem.isShow);\n  }\n\n  get isLoggedIn(): boolean {\n    return User.isLoggedIn;\n  }\n\n  get userName(): string {\n    return User.currentUser?.username || \"\";\n  }\n\n  get userImage(): string | null | undefined {\n    return User.currentUser?.image;\n  }\n}\n\n[Props]: 없음\n[Methods]: menuItems, isLoggedIn, userName, userImage\n[Emits]: 없음"
  },
  {
    "filePath": "../repo/vue-ts-realworld-app/src/layouts/AppFooter.vue",
    "template": "<footer>\n    <div class=\"container\">\n      <a href=\"/\" class=\"logo-font\">conduit</a>\n      <span class=\"attribution\">\n        An interactive learning project from\n        <a href=\"https://thinkster.io\">Thinkster</a>\n        . Code &amp; design licensed under MIT.\n      </span>\n    </div>\n  </footer>",
    "script": "import { Component, Vue } from \"vue-property-decorator\";\n\n@Component\nexport default class AppFooter extends Vue {}",
    "className": "AppFooter",
    "methods": [],
    "properties": [],
    "emits": [],
    "embeddingText": "Vue 컴포넌트 이름: AppFooter\n파일 경로: ../repo/vue-ts-realworld-app/src/layouts/AppFooter.vue\n\n[Template HTML]\n<footer>\n    <div class=\"container\">\n      <a href=\"/\" class=\"logo-font\">conduit</a>\n      <span class=\"attribution\">\n        An interactive learning project from\n        <a href=\"https://thinkster.io\">Thinkster</a>\n        . Code &amp; design licensed under MIT.\n      </span>\n    </div>\n  </footer>\n\n[Script Code]\nimport { Component, Vue } from \"vue-property-decorator\";\n\n@Component\nexport default class AppFooter extends Vue {}\n\n[Props]: 없음\n[Methods]: 없음\n[Emits]: 없음"
  },
  {
    "filePath": "../repo/vue-ts-realworld-app/src/views/Home.vue",
    "template": "<div class=\"home-page\">\n    <home-banner />\n    <div class=\"container page\">\n      <div class=\"row\">\n        <div class=\"col-md-9\">\n          <common-feed\n            :tabs=\"tabs\"\n            :active-tab-id=\"activeTabId\"\n            :is-loading=\"isLoading\"\n            :feed=\"activeFeed\"\n            :items-per-page=\"itemsPerPage\"\n            :current-page=\"currentPage\"\n            @page-changed=\"onPageChanged\"\n            @tab-changed=\"onTabChanged\"\n          />\n        </div>\n\n        <div class=\"col-md-3\">\n          <home-tags @tag-selected=\"onTagFeedActivated\" />\n        </div>\n      </div>\n    </div>\n  </div>",
    "script": "import { Component, Vue } from \"vue-property-decorator\";\n\nimport CommonFeed, { IFeedTab } from \"@/components/CommonFeed.vue\";\nimport HomeBanner from \"@/components/HomeBanner.vue\";\nimport HomeTags from \"@/components/HomeTags.vue\";\nimport IPagination, {\n  DEFAULT_ITEMS_PER_PAGE,\n  DEFAULT_START_PAGE\n} from \"@/services/common/IPagination\";\nimport { IArticleList } from \"@/services/realWorldApi/models\";\nimport Article from \"@/store/modules/Article\";\nimport User from \"@/store/modules/User\";\n\nenum FeedType {\n  Global = \"Global\",\n  My = \"My\",\n  Tag = \"Tag\"\n}\n\n@Component({\n  components: {\n    HomeBanner,\n    HomeTags,\n    CommonFeed\n  }\n})\nexport default class Home extends Vue {\n  feedTypes: typeof FeedType = FeedType;\n  isLoading = false;\n  currentPage = DEFAULT_START_PAGE;\n  itemsPerPage = DEFAULT_ITEMS_PER_PAGE;\n\n  activeTabId: FeedType = FeedType.My;\n  activeFeed: IArticleList = { articles: [], articlesCount: 0 };\n  activeTag: string | null = null;\n\n  get isLoggedIn(): boolean {\n    return User.isLoggedIn;\n  }\n\n  get tabs(): IFeedTab[] {\n    const res: IFeedTab[] = [];\n\n    if (this.isLoggedIn) {\n      res.push({\n        id: FeedType.My,\n        title: \"Your Feed\"\n      });\n    }\n\n    res.push({\n      id: FeedType.Global,\n      title: \"Global Feed\"\n    });\n\n    if (this.activeTag && this.activeTabId === FeedType.Tag) {\n      res.push({\n        id: FeedType.Tag,\n        title: `#${this.activeTag}`\n      });\n    }\n    return res;\n  }\n\n  async mounted(): Promise<void> {\n    this.activeTabId = this.isLoggedIn ? FeedType.My : FeedType.Global;\n    await this.fetchFeed();\n  }\n\n  async onTabChanged(tabId: FeedType): Promise<void> {\n    switch (tabId) {\n      case FeedType.My:\n      case FeedType.Global:\n        this.activeTabId = tabId;\n        this.currentPage = DEFAULT_START_PAGE;\n        await this.fetchFeed();\n        break;\n      case FeedType.Tag:\n        await this.onTagFeedActivated(this.activeTag || \"\");\n        break;\n\n      default:\n        throw new Error(`Unexpected tabId: ${tabId}`);\n    }\n  }\n\n  async onTagFeedActivated(tag: string): Promise<void> {\n    this.activeTabId = FeedType.Tag;\n    this.currentPage = DEFAULT_START_PAGE;\n    this.activeTag = tag;\n    await this.fetchFeed();\n  }\n\n  async onPageChanged(page: number): Promise<void> {\n    this.currentPage = page;\n    await this.fetchFeed();\n  }\n\n  async fetchFeed(): Promise<void> {\n    this.isLoading = true;\n    try {\n      const pagination: IPagination = {\n        limit: this.itemsPerPage,\n        offset: (this.currentPage - 1) * this.itemsPerPage\n      };\n\n      switch (this.activeTabId) {\n        case FeedType.Global:\n          this.activeFeed = await Article.getList({ ...pagination });\n          break;\n        case FeedType.Tag:\n          this.activeFeed = await Article.getList({\n            tag: this.activeTag as string,\n            ...pagination\n          });\n          break;\n        case FeedType.My:\n          this.activeFeed = await Article.getFeed(pagination);\n          break;\n        default:\n          break;\n      }\n    } finally {\n      this.isLoading = false;\n      window.scrollTo(0, 0);\n    }\n  }\n}",
    "className": "Home",
    "methods": [
      "isLoggedIn",
      "tabs",
      "if",
      "if",
      "mounted",
      "onTabChanged",
      "switch",
      "onTagFeedActivated",
      "onPageChanged",
      "fetchFeed",
      "switch"
    ],
    "properties": [],
    "emits": [],
    "embeddingText": "Vue 컴포넌트 이름: Home\n파일 경로: ../repo/vue-ts-realworld-app/src/views/Home.vue\n\n[Template HTML]\n<div class=\"home-page\">\n    <home-banner />\n    <div class=\"container page\">\n      <div class=\"row\">\n        <div class=\"col-md-9\">\n          <common-feed\n            :tabs=\"tabs\"\n            :active-tab-id=\"activeTabId\"\n            :is-loading=\"isLoading\"\n            :feed=\"activeFeed\"\n            :items-per-page=\"itemsPerPage\"\n            :current-page=\"currentPage\"\n            @page-changed=\"onPageChanged\"\n            @tab-changed=\"onTabChanged\"\n          />\n        </div>\n\n        <div class=\"col-md-3\">\n          <home-tags @tag-selected=\"onTagFeedActivated\" />\n        </div>\n      </div>\n    </div>\n  </div>\n\n[Script Code]\nimport { Component, Vue } from \"vue-property-decorator\";\n\nimport CommonFeed, { IFeedTab } from \"@/components/CommonFeed.vue\";\nimport HomeBanner from \"@/components/HomeBanner.vue\";\nimport HomeTags from \"@/components/HomeTags.vue\";\nimport IPagination, {\n  DEFAULT_ITEMS_PER_PAGE,\n  DEFAULT_START_PAGE\n} from \"@/services/common/IPagination\";\nimport { IArticleList } from \"@/services/realWorldApi/models\";\nimport Article from \"@/store/modules/Article\";\nimport User from \"@/store/modules/User\";\n\nenum FeedType {\n  Global = \"Global\",\n  My = \"My\",\n  Tag = \"Tag\"\n}\n\n@Component({\n  components: {\n    HomeBanner,\n    HomeTags,\n    CommonFeed\n  }\n})\nexport default class Home extends Vue {\n  feedTypes: typeof FeedType = FeedType;\n  isLoading = false;\n  currentPage = DEFAULT_START_PAGE;\n  itemsPerPage = DEFAULT_ITEMS_PER_PAGE;\n\n  activeTabId: FeedType = FeedType.My;\n  activeFeed: IArticleList = { articles: [], articlesCount: 0 };\n  activeTag: string | null = null;\n\n  get isLoggedIn(): boolean {\n    return User.isLoggedIn;\n  }\n\n  get tabs(): IFeedTab[] {\n    const res: IFeedTab[] = [];\n\n    if (this.isLoggedIn) {\n      res.push({\n        id: FeedType.My,\n        title: \"Your Feed\"\n      });\n    }\n\n    res.push({\n      id: FeedType.Global,\n      title: \"Global Feed\"\n    });\n\n    if (this.activeTag && this.activeTabId === FeedType.Tag) {\n      res.push({\n        id: FeedType.Tag,\n        title: `#${this.activeTag}`\n      });\n    }\n    return res;\n  }\n\n  async mounted(): Promise<void> {\n    this.activeTabId = this.isLoggedIn ? FeedType.My : FeedType.Global;\n    await this.fetchFeed();\n  }\n\n  async onTabChanged(tabId: FeedType): Promise<void> {\n    switch (tabId) {\n      case FeedType.My:\n      case FeedType.Global:\n        this.activeTabId = tabId;\n        this.currentPage = DEFAULT_START_PAGE;\n        await this.fetchFeed();\n        break;\n      case FeedType.Tag:\n        await this.onTagFeedActivated(this.activeTag || \"\");\n        break;\n\n      default:\n        throw new Error(`Unexpected tabId: ${tabId}`);\n    }\n  }\n\n  async onTagFeedActivated(tag: string): Promise<void> {\n    this.activeTabId = FeedType.Tag;\n    this.currentPage = DEFAULT_START_PAGE;\n    this.activeTag = tag;\n    await this.fetchFeed();\n  }\n\n  async onPageChanged(page: number): Promise<void> {\n    this.currentPage = page;\n    await this.fetchFeed();\n  }\n\n  async fetchFeed(): Promise<void> {\n    this.isLoading = true;\n    try {\n      const pagination: IPagination = {\n        limit: this.itemsPerPage,\n        offset: (this.currentPage - 1) * this.itemsPerPage\n      };\n\n      switch (this.activeTabId) {\n        case FeedType.Global:\n          this.activeFeed = await Article.getList({ ...pagination });\n          break;\n        case FeedType.Tag:\n          this.activeFeed = await Article.getList({\n            tag: this.activeTag as string,\n            ...pagination\n          });\n          break;\n        case FeedType.My:\n          this.activeFeed = await Article.getFeed(pagination);\n          break;\n        default:\n          break;\n      }\n    } finally {\n      this.isLoading = false;\n      window.scrollTo(0, 0);\n    }\n  }\n}\n\n[Props]: 없음\n[Methods]: isLoggedIn, tabs, if, if, mounted, onTabChanged, switch, onTagFeedActivated, onPageChanged, fetchFeed, switch\n[Emits]: 없음"
  },
  {
    "filePath": "../repo/vue-ts-realworld-app/src/views/AuthRegister.vue",
    "template": "<auth-page :mode=\"mode\" />",
    "script": "import { Component, Vue } from \"vue-property-decorator\";\n\nimport AuthPage, { AuthPageMode } from \"@/components/AuthPage.vue\";\n\n@Component({\n  components: {\n    AuthPage\n  }\n})\nexport default class AuthRegister extends Vue {\n  mode: Readonly<AuthPageMode> = AuthPageMode.Register;\n}",
    "className": "AuthRegister",
    "methods": [],
    "properties": [],
    "emits": [],
    "embeddingText": "Vue 컴포넌트 이름: AuthRegister\n파일 경로: ../repo/vue-ts-realworld-app/src/views/AuthRegister.vue\n\n[Template HTML]\n<auth-page :mode=\"mode\" />\n\n[Script Code]\nimport { Component, Vue } from \"vue-property-decorator\";\n\nimport AuthPage, { AuthPageMode } from \"@/components/AuthPage.vue\";\n\n@Component({\n  components: {\n    AuthPage\n  }\n})\nexport default class AuthRegister extends Vue {\n  mode: Readonly<AuthPageMode> = AuthPageMode.Register;\n}\n\n[Props]: 없음\n[Methods]: 없음\n[Emits]: 없음"
  },
  {
    "filePath": "../repo/vue-ts-realworld-app/src/views/ProfileIndex.vue",
    "template": "<common-loader v-if=\"isLoading || !profile\" />\n  <div v-else class=\"profile-page\">\n    <div class=\"user-info\">\n      <div class=\"container\">\n        <div class=\"row\">\n          <div class=\"col-xs-12 col-md-10 offset-md-1\">\n            <img :src=\"profile.image\" class=\"user-img\" />\n            <h4>{{ profile.username }}</h4>\n            <p>\n              {{ profile.bio }}\n            </p>\n\n            <router-link\n              v-if=\"isMyProfile\"\n              :to=\"{ name: $routesNames.profileSettings }\"\n              class=\"btn action-btn btn-sm btn-outline-secondary\"\n            >\n              <i class=\"ion-gear-a\"></i>\n              Edit Profile Settings\n            </router-link>\n            <profile-follow-button\n              v-else\n              :username=\"author.username\"\n              :following=\"author.following\"\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"container\">\n      <div class=\"row\">\n        <div class=\"col-xs-12 col-md-10 offset-md-1\">\n          <common-feed\n            :tabs=\"tabs\"\n            :active-tab-id=\"activeTabId\"\n            :is-loading=\"isLoading\"\n            :feed=\"activeFeed\"\n            :items-per-page=\"itemsPerPage\"\n            :current-page=\"currentPage\"\n            @page-changed=\"onPageChanged\"\n            @tab-changed=\"onTabChanged\"\n          />\n        </div>\n      </div>\n    </div>\n  </div>",
    "script": "import { Component, Vue } from \"vue-property-decorator\";\n\nimport CommonFeed, { IFeedTab } from \"@/components/CommonFeed.vue\";\nimport CommonLoader from \"@/components/CommonLoader.vue\";\nimport ProfileFollowButton from \"@/components/ProfileFollowButton.vue\";\nimport { Location } from \"@/router\";\nimport IPagination, {\n  DEFAULT_ITEMS_PER_PAGE,\n  DEFAULT_START_PAGE\n} from \"@/services/common/IPagination\";\nimport { IArticleList, IProfile } from \"@/services/realWorldApi/models\";\nimport Article from \"@/store/modules/Article\";\nimport Profile from \"@/store/modules/Profile\";\nimport User from \"@/store/modules/User\";\n\nenum FeedType {\n  Favorites = \"favorites\",\n  My = \"my\"\n}\n\nComponent.registerHooks([\"beforeRouteEnter\", \"beforeRouteUpdate\"]);\n\n@Component({\n  components: {\n    CommonLoader,\n    CommonFeed,\n    ProfileFollowButton\n  }\n})\nexport default class ProfileIndex extends Vue {\n  _profile: IProfile = { username: \"\", bio: \"\", image: \"\", following: false };\n  isLoading = false;\n  isFollowActionInProgress = false;\n  currentPage = DEFAULT_START_PAGE;\n  itemsPerPage = DEFAULT_ITEMS_PER_PAGE;\n\n  activeTabId: FeedType = FeedType.My;\n  activeFeed: IArticleList = { articles: [], articlesCount: 0 };\n  activeTag: string | null = null;\n\n  get profile(): IProfile {\n    return Profile.profilesCache[this._profile?.username] || this._profile;\n  }\n\n  get tabs(): IFeedTab[] {\n    const myTitle = this.isMyProfile\n      ? \"My Articles\"\n      : `${this.profile.username}'s Articles`;\n    return [\n      {\n        id: FeedType.My,\n        title: myTitle\n      },\n      {\n        id: FeedType.Favorites,\n        title: \"Favorited Articles\"\n      }\n    ];\n  }\n\n  get isMyProfile(): boolean {\n    return this.profile.username === User.currentUser?.username;\n  }\n\n  beforeRouteEnter(to: Location, from: Location, next: Function): void {\n    next((vm: ProfileIndex) => {\n      vm.onRouteUpdate(to, from, next);\n    });\n  }\n  beforeRouteUpdate(to: Location, from: Location, next: Function): void {\n    this.onRouteUpdate(to, from, next);\n  }\n\n  async onRouteUpdate(\n    to: Location,\n    from: Location,\n    next: Function\n  ): Promise<void> {\n    next();\n\n    this.isLoading = true;\n    try {\n      const toUserName = to?.params?.username;\n      const fromUserName = from?.params?.username;\n      if (!toUserName) {\n        this.$router.push({ name: this.$routesNames.home });\n        return;\n      }\n      if (toUserName !== fromUserName) {\n        this._profile = await Profile.get(toUserName);\n      }\n\n      const tabId = to?.params?.tabId;\n      if (tabId && Object.values(FeedType).some(v => (v as string) === tabId)) {\n        this.activeTabId = tabId as FeedType;\n      } else {\n        this.activeTabId = FeedType.My;\n      }\n\n      await this.fetchFeed();\n    } catch (e) {\n      this.$router.push({ name: this.$routesNames.home });\n    } finally {\n      this.isLoading = false;\n    }\n  }\n\n  async onTabChanged(tabId: FeedType): Promise<void> {\n    switch (tabId) {\n      case FeedType.My:\n      case FeedType.Favorites:\n        this.activeTabId = tabId;\n        this.currentPage = DEFAULT_START_PAGE;\n        this.$router.push({\n          params: { username: this.profile.username, tabId: this.activeTabId }\n        });\n        await this.fetchFeed();\n        break;\n\n      default:\n        throw new Error(`Unexpected tabId: ${tabId}`);\n    }\n  }\n\n  async onPageChanged(page: number): Promise<void> {\n    this.currentPage = page;\n    await this.fetchFeed();\n  }\n\n  async fetchFeed(): Promise<void> {\n    this.isLoading = true;\n    try {\n      const pagination: IPagination = {\n        limit: this.itemsPerPage,\n        offset: (this.currentPage - 1) * this.itemsPerPage\n      };\n\n      switch (this.activeTabId) {\n        case FeedType.Favorites:\n          this.activeFeed = await Article.getList({\n            favorited: this.profile.username,\n            ...pagination\n          });\n          break;\n        case FeedType.My:\n          this.activeFeed = await Article.getList({\n            author: this.profile.username,\n            ...pagination\n          });\n          break;\n        default:\n          break;\n      }\n    } finally {\n      this.isLoading = false;\n      window.scrollTo(0, 0);\n    }\n  }\n}",
    "className": "ProfileIndex",
    "methods": [
      "profile",
      "tabs",
      "isMyProfile",
      "beforeRouteEnter",
      "beforeRouteUpdate",
      "onRouteUpdate",
      "if",
      "if",
      "catch",
      "onTabChanged",
      "switch",
      "onPageChanged",
      "fetchFeed",
      "switch"
    ],
    "properties": [],
    "emits": [],
    "embeddingText": "Vue 컴포넌트 이름: ProfileIndex\n파일 경로: ../repo/vue-ts-realworld-app/src/views/ProfileIndex.vue\n\n[Template HTML]\n<common-loader v-if=\"isLoading || !profile\" />\n  <div v-else class=\"profile-page\">\n    <div class=\"user-info\">\n      <div class=\"container\">\n        <div class=\"row\">\n          <div class=\"col-xs-12 col-md-10 offset-md-1\">\n            <img :src=\"profile.image\" class=\"user-img\" />\n            <h4>{{ profile.username }}</h4>\n            <p>\n              {{ profile.bio }}\n            </p>\n\n            <router-link\n              v-if=\"isMyProfile\"\n              :to=\"{ name: $routesNames.profileSettings }\"\n              class=\"btn action-btn btn-sm btn-outline-secondary\"\n            >\n              <i class=\"ion-gear-a\"></i>\n              Edit Profile Settings\n            </router-link>\n            <profile-follow-button\n              v-else\n              :username=\"author.username\"\n              :following=\"author.following\"\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"container\">\n      <div class=\"row\">\n        <div class=\"col-xs-12 col-md-10 offset-md-1\">\n          <common-feed\n            :tabs=\"tabs\"\n            :active-tab-id=\"activeTabId\"\n            :is-loading=\"isLoading\"\n            :feed=\"activeFeed\"\n            :items-per-page=\"itemsPerPage\"\n            :current-page=\"currentPage\"\n            @page-changed=\"onPageChanged\"\n            @tab-changed=\"onTabChanged\"\n          />\n        </div>\n      </div>\n    </div>\n  </div>\n\n[Script Code]\nimport { Component, Vue } from \"vue-property-decorator\";\n\nimport CommonFeed, { IFeedTab } from \"@/components/CommonFeed.vue\";\nimport CommonLoader from \"@/components/CommonLoader.vue\";\nimport ProfileFollowButton from \"@/components/ProfileFollowButton.vue\";\nimport { Location } from \"@/router\";\nimport IPagination, {\n  DEFAULT_ITEMS_PER_PAGE,\n  DEFAULT_START_PAGE\n} from \"@/services/common/IPagination\";\nimport { IArticleList, IProfile } from \"@/services/realWorldApi/models\";\nimport Article from \"@/store/modules/Article\";\nimport Profile from \"@/store/modules/Profile\";\nimport User from \"@/store/modules/User\";\n\nenum FeedType {\n  Favorites = \"favorites\",\n  My = \"my\"\n}\n\nComponent.registerHooks([\"beforeRouteEnter\", \"beforeRouteUpdate\"]);\n\n@Component({\n  components: {\n    CommonLoader,\n    CommonFeed,\n    ProfileFollowButton\n  }\n})\nexport default class ProfileIndex extends Vue {\n  _profile: IProfile = { username: \"\", bio: \"\", image: \"\", following: false };\n  isLoading = false;\n  isFollowActionInProgress = false;\n  currentPage = DEFAULT_START_PAGE;\n  itemsPerPage = DEFAULT_ITEMS_PER_PAGE;\n\n  activeTabId: FeedType = FeedType.My;\n  activeFeed: IArticleList = { articles: [], articlesCount: 0 };\n  activeTag: string | null = null;\n\n  get profile(): IProfile {\n    return Profile.profilesCache[this._profile?.username] || this._profile;\n  }\n\n  get tabs(): IFeedTab[] {\n    const myTitle = this.isMyProfile\n      ? \"My Articles\"\n      : `${this.profile.username}'s Articles`;\n    return [\n      {\n        id: FeedType.My,\n        title: myTitle\n      },\n      {\n        id: FeedType.Favorites,\n        title: \"Favorited Articles\"\n      }\n    ];\n  }\n\n  get isMyProfile(): boolean {\n    return this.profile.username === User.currentUser?.username;\n  }\n\n  beforeRouteEnter(to: Location, from: Location, next: Function): void {\n    next((vm: ProfileIndex) => {\n      vm.onRouteUpdate(to, from, next);\n    });\n  }\n  beforeRouteUpdate(to: Location, from: Location, next: Function): void {\n    this.onRouteUpdate(to, from, next);\n  }\n\n  async onRouteUpdate(\n    to: Location,\n    from: Location,\n    next: Function\n  ): Promise<void> {\n    next();\n\n    this.isLoading = true;\n    try {\n      const toUserName = to?.params?.username;\n      const fromUserName = from?.params?.username;\n      if (!toUserName) {\n        this.$router.push({ name: this.$routesNames.home });\n        return;\n      }\n      if (toUserName !== fromUserName) {\n        this._profile = await Profile.get(toUserName);\n      }\n\n      const tabId = to?.params?.tabId;\n      if (tabId && Object.values(FeedType).some(v => (v as string) === tabId)) {\n        this.activeTabId = tabId as FeedType;\n      } else {\n        this.activeTabId = FeedType.My;\n      }\n\n      await this.fetchFeed();\n    } catch (e) {\n      this.$router.push({ name: this.$routesNames.home });\n    } finally {\n      this.isLoading = false;\n    }\n  }\n\n  async onTabChanged(tabId: FeedType): Promise<void> {\n    switch (tabId) {\n      case FeedType.My:\n      case FeedType.Favorites:\n        this.activeTabId = tabId;\n        this.currentPage = DEFAULT_START_PAGE;\n        this.$router.push({\n          params: { username: this.profile.username, tabId: this.activeTabId }\n        });\n        await this.fetchFeed();\n        break;\n\n      default:\n        throw new Error(`Unexpected tabId: ${tabId}`);\n    }\n  }\n\n  async onPageChanged(page: number): Promise<void> {\n    this.currentPage = page;\n    await this.fetchFeed();\n  }\n\n  async fetchFeed(): Promise<void> {\n    this.isLoading = true;\n    try {\n      const pagination: IPagination = {\n        limit: this.itemsPerPage,\n        offset: (this.currentPage - 1) * this.itemsPerPage\n      };\n\n      switch (this.activeTabId) {\n        case FeedType.Favorites:\n          this.activeFeed = await Article.getList({\n            favorited: this.profile.username,\n            ...pagination\n          });\n          break;\n        case FeedType.My:\n          this.activeFeed = await Article.getList({\n            author: this.profile.username,\n            ...pagination\n          });\n          break;\n        default:\n          break;\n      }\n    } finally {\n      this.isLoading = false;\n      window.scrollTo(0, 0);\n    }\n  }\n}\n\n[Props]: 없음\n[Methods]: profile, tabs, isMyProfile, beforeRouteEnter, beforeRouteUpdate, onRouteUpdate, if, if, catch, onTabChanged, switch, onPageChanged, fetchFeed, switch\n[Emits]: 없음"
  },
  {
    "filePath": "../repo/vue-ts-realworld-app/src/views/ArticleCreate.vue",
    "template": "<article-editor />",
    "script": "import { Component, Vue } from \"vue-property-decorator\";\n\nimport ArticleEditor from \"@/components/ArticleEditor.vue\";\n\n@Component({\n  components: {\n    ArticleEditor\n  }\n})\nexport default class ArticleCreate extends Vue {}",
    "className": "ArticleCreate",
    "methods": [],
    "properties": [],
    "emits": [],
    "embeddingText": "Vue 컴포넌트 이름: ArticleCreate\n파일 경로: ../repo/vue-ts-realworld-app/src/views/ArticleCreate.vue\n\n[Template HTML]\n<article-editor />\n\n[Script Code]\nimport { Component, Vue } from \"vue-property-decorator\";\n\nimport ArticleEditor from \"@/components/ArticleEditor.vue\";\n\n@Component({\n  components: {\n    ArticleEditor\n  }\n})\nexport default class ArticleCreate extends Vue {}\n\n[Props]: 없음\n[Methods]: 없음\n[Emits]: 없음"
  },
  {
    "filePath": "../repo/vue-ts-realworld-app/src/views/ArticleView.vue",
    "template": "<common-loader v-if=\"isLoading || !article\" />\n\n  <div v-else class=\"article-page\">\n    <div class=\"banner\">\n      <div class=\"container\">\n        <h1>{{ article.title }}</h1>\n        <article-view-actions\n          :article=\"article\"\n          @delete-article=\"onDeleteArticle\"\n        />\n      </div>\n    </div>\n    <div class=\"container page\">\n      <div class=\"row article-content\">\n        <!-- eslint-disable-next-line vue/no-v-html -->\n        <div class=\"col-md-12\" v-html=\"HTMLBody\"></div>\n      </div>\n\n      <hr />\n\n      <div class=\"article-actions\">\n        <article-view-actions\n          :article=\"article\"\n          @delete-article=\"onDeleteArticle\"\n        />\n      </div>\n\n      <div class=\"row\">\n        <article-comments class=\"col-xs-12 col-md-8 offset-md-2\" :slug=\"slug\" />\n      </div>\n    </div>\n  </div>",
    "script": "import DOMPurify from \"dompurify\";\nimport marked from \"marked\";\nimport { Component, Vue } from \"vue-property-decorator\";\n\nimport ArticleComments from \"@/components/ArticleComments.vue\";\nimport ArticleViewActions from \"@/components/ArticleViewActions.vue\";\nimport CommonLoader from \"@/components/CommonLoader.vue\";\nimport { Location } from \"@/router\";\nimport { IArticle } from \"@/services/realWorldApi/models\";\nimport Article from \"@/store/modules/Article\";\n\nComponent.registerHooks([\"beforeRouteEnter\", \"beforeRouteUpdate\"]);\n\n@Component({\n  components: {\n    ArticleViewActions,\n    CommonLoader,\n    ArticleComments\n  }\n})\nexport default class ArticleView extends Vue {\n  isLoading = false;\n  slug = \"\";\n  _article: IArticle | null = null;\n\n  get article(): IArticle {\n    return Article.articlesCache[this.slug] || this._article;\n  }\n\n  get HTMLBody(): string {\n    const dirtyHtml = marked(this.article.body);\n    return DOMPurify.sanitize(dirtyHtml);\n  }\n\n  beforeRouteEnter(to: Location, from: Location, next: Function): void {\n    next((vm: ArticleView) => {\n      vm.onRouteUpdate(to, from, next);\n    });\n  }\n  beforeRouteUpdate(to: Location, from: Location, next: Function): void {\n    this.onRouteUpdate(to, from, next);\n  }\n\n  async onRouteUpdate(\n    to: Location,\n    from: Location,\n    next: Function\n  ): Promise<void> {\n    next();\n\n    this.isLoading = true;\n    try {\n      const toSlug = to?.params?.slug;\n      const fromSlug = from?.params?.slug;\n      if (!toSlug) {\n        this.$router.push({ name: this.$routesNames.home });\n        return;\n      }\n      if (toSlug !== fromSlug) {\n        await Article.fetchSingle(toSlug);\n        this.slug = toSlug;\n      }\n    } catch (e) {\n      this.$router.push({ name: this.$routesNames.home });\n    } finally {\n      this.isLoading = false;\n    }\n  }\n\n  async onDeleteArticle(): Promise<void> {\n    this.isLoading = true;\n    try {\n      await Article.delete(this.slug);\n      this.$router.push({ name: this.$routesNames.home });\n    } finally {\n      this.isLoading = false;\n    }\n  }\n}",
    "className": "ArticleView",
    "methods": [
      "article",
      "HTMLBody",
      "beforeRouteEnter",
      "beforeRouteUpdate",
      "onRouteUpdate",
      "if",
      "if",
      "catch",
      "onDeleteArticle"
    ],
    "properties": [],
    "emits": [],
    "embeddingText": "Vue 컴포넌트 이름: ArticleView\n파일 경로: ../repo/vue-ts-realworld-app/src/views/ArticleView.vue\n\n[Template HTML]\n<common-loader v-if=\"isLoading || !article\" />\n\n  <div v-else class=\"article-page\">\n    <div class=\"banner\">\n      <div class=\"container\">\n        <h1>{{ article.title }}</h1>\n        <article-view-actions\n          :article=\"article\"\n          @delete-article=\"onDeleteArticle\"\n        />\n      </div>\n    </div>\n    <div class=\"container page\">\n      <div class=\"row article-content\">\n        <!-- eslint-disable-next-line vue/no-v-html -->\n        <div class=\"col-md-12\" v-html=\"HTMLBody\"></div>\n      </div>\n\n      <hr />\n\n      <div class=\"article-actions\">\n        <article-view-actions\n          :article=\"article\"\n          @delete-article=\"onDeleteArticle\"\n        />\n      </div>\n\n      <div class=\"row\">\n        <article-comments class=\"col-xs-12 col-md-8 offset-md-2\" :slug=\"slug\" />\n      </div>\n    </div>\n  </div>\n\n[Script Code]\nimport DOMPurify from \"dompurify\";\nimport marked from \"marked\";\nimport { Component, Vue } from \"vue-property-decorator\";\n\nimport ArticleComments from \"@/components/ArticleComments.vue\";\nimport ArticleViewActions from \"@/components/ArticleViewActions.vue\";\nimport CommonLoader from \"@/components/CommonLoader.vue\";\nimport { Location } from \"@/router\";\nimport { IArticle } from \"@/services/realWorldApi/models\";\nimport Article from \"@/store/modules/Article\";\n\nComponent.registerHooks([\"beforeRouteEnter\", \"beforeRouteUpdate\"]);\n\n@Component({\n  components: {\n    ArticleViewActions,\n    CommonLoader,\n    ArticleComments\n  }\n})\nexport default class ArticleView extends Vue {\n  isLoading = false;\n  slug = \"\";\n  _article: IArticle | null = null;\n\n  get article(): IArticle {\n    return Article.articlesCache[this.slug] || this._article;\n  }\n\n  get HTMLBody(): string {\n    const dirtyHtml = marked(this.article.body);\n    return DOMPurify.sanitize(dirtyHtml);\n  }\n\n  beforeRouteEnter(to: Location, from: Location, next: Function): void {\n    next((vm: ArticleView) => {\n      vm.onRouteUpdate(to, from, next);\n    });\n  }\n  beforeRouteUpdate(to: Location, from: Location, next: Function): void {\n    this.onRouteUpdate(to, from, next);\n  }\n\n  async onRouteUpdate(\n    to: Location,\n    from: Location,\n    next: Function\n  ): Promise<void> {\n    next();\n\n    this.isLoading = true;\n    try {\n      const toSlug = to?.params?.slug;\n      const fromSlug = from?.params?.slug;\n      if (!toSlug) {\n        this.$router.push({ name: this.$routesNames.home });\n        return;\n      }\n      if (toSlug !== fromSlug) {\n        await Article.fetchSingle(toSlug);\n        this.slug = toSlug;\n      }\n    } catch (e) {\n      this.$router.push({ name: this.$routesNames.home });\n    } finally {\n      this.isLoading = false;\n    }\n  }\n\n  async onDeleteArticle(): Promise<void> {\n    this.isLoading = true;\n    try {\n      await Article.delete(this.slug);\n      this.$router.push({ name: this.$routesNames.home });\n    } finally {\n      this.isLoading = false;\n    }\n  }\n}\n\n[Props]: 없음\n[Methods]: article, HTMLBody, beforeRouteEnter, beforeRouteUpdate, onRouteUpdate, if, if, catch, onDeleteArticle\n[Emits]: 없음"
  },
  {
    "filePath": "../repo/vue-ts-realworld-app/src/views/AuthLogin.vue",
    "template": "<auth-page :mode=\"mode\" />",
    "script": "import { Component, Vue } from \"vue-property-decorator\";\n\nimport AuthPage, { AuthPageMode } from \"@/components/AuthPage.vue\";\n\n@Component({\n  components: {\n    AuthPage\n  }\n})\nexport default class AuthLogin extends Vue {\n  mode: Readonly<AuthPageMode> = AuthPageMode.Login;\n}",
    "className": "AuthLogin",
    "methods": [],
    "properties": [],
    "emits": [],
    "embeddingText": "Vue 컴포넌트 이름: AuthLogin\n파일 경로: ../repo/vue-ts-realworld-app/src/views/AuthLogin.vue\n\n[Template HTML]\n<auth-page :mode=\"mode\" />\n\n[Script Code]\nimport { Component, Vue } from \"vue-property-decorator\";\n\nimport AuthPage, { AuthPageMode } from \"@/components/AuthPage.vue\";\n\n@Component({\n  components: {\n    AuthPage\n  }\n})\nexport default class AuthLogin extends Vue {\n  mode: Readonly<AuthPageMode> = AuthPageMode.Login;\n}\n\n[Props]: 없음\n[Methods]: 없음\n[Emits]: 없음"
  },
  {
    "filePath": "../repo/vue-ts-realworld-app/src/views/ProfileSettings.vue",
    "template": "<div class=\"settings-page\">\n    <div class=\"container page\">\n      <div class=\"row\">\n        <div class=\"col-md-6 offset-md-3 col-xs-12\">\n          <h1 class=\"text-xs-center\">Your Settings</h1>\n          <common-errors-list :errors=\"errors\" />\n          <form>\n            <fieldset :disabled=\"isLoading\">\n              <fieldset class=\"form-group\">\n                <input\n                  v-model=\"image\"\n                  class=\"form-control\"\n                  type=\"text\"\n                  placeholder=\"URL of profile picture\"\n                />\n              </fieldset>\n              <fieldset class=\"form-group\">\n                <input\n                  v-model=\"username\"\n                  class=\"form-control form-control-lg\"\n                  type=\"text\"\n                  placeholder=\"Your Name\"\n                  required=\"true\"\n                />\n              </fieldset>\n              <fieldset class=\"form-group\">\n                <textarea\n                  v-model=\"bio\"\n                  class=\"form-control form-control-lg\"\n                  rows=\"8\"\n                  placeholder=\"Short bio about you\"\n                ></textarea>\n              </fieldset>\n              <fieldset class=\"form-group\">\n                <input\n                  v-model=\"email\"\n                  class=\"form-control form-control-lg\"\n                  type=\"email\"\n                  placeholder=\"Email\"\n                  required=\"true\"\n                />\n              </fieldset>\n              <fieldset class=\"form-group\">\n                <input\n                  v-model=\"password\"\n                  class=\"form-control form-control-lg\"\n                  type=\"password\"\n                  placeholder=\"New password\"\n                />\n              </fieldset>\n              <common-loader v-if=\"isLoading\" :size=\"5\" />\n              <button\n                v-else\n                class=\"btn btn-lg btn-primary pull-xs-right\"\n                @click=\"updateSettings\"\n              >\n                Update Settings\n              </button>\n            </fieldset>\n          </form>\n          <hr />\n          <button class=\"btn btn-outline-danger\" @click=\"logout\">\n            Or click here to logout.\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>",
    "script": "import { Component, Vue, Watch } from \"vue-property-decorator\";\n\nimport CommonErrorsList from \"@/components/CommonErrorsList.vue\";\nimport CommonLoader from \"@/components/CommonLoader.vue\";\nimport { ICurrentUser } from \"@/store/models\";\nimport User from \"@/store/modules/User\";\nimport { isArrayOfStrings } from \"@/utils/ArrayUtils\";\n\n@Component({\n  components: {\n    CommonLoader,\n    CommonErrorsList\n  }\n})\nexport default class ProfileSettings extends Vue {\n  isLoading = false;\n\n  image: string | null = null;\n  bio = \"\";\n  email = \"\";\n  password: string | null = null;\n  username = \"\";\n  errors?: string[] = [];\n\n  get hasErrors(): boolean {\n    return !!this.errors?.length;\n  }\n\n  get currentUser(): Partial<ICurrentUser> {\n    return User.currentUser || {};\n  }\n\n  logout(): void {\n    User.logout();\n    this.$router.push({ name: this.$routesNames.home });\n  }\n\n  async updateSettings(): Promise<void> {\n    this.errors = [];\n\n    this.isLoading = true;\n    try {\n      await User.update({\n        email: this.email,\n        password: this.password,\n        bio: this.bio,\n        image: this.image,\n        username: this.username\n      });\n      this.$router.push({ name: this.$routesNames.home });\n    } catch (e) {\n      if (isArrayOfStrings(e)) {\n        this.errors = e;\n      } else {\n        throw e;\n      }\n    } finally {\n      this.isLoading = false;\n    }\n  }\n  @Watch(\"currentUser\", { immediate: true })\n  onCurrentUserLoaded(newValue: ICurrentUser): void {\n    this.errors = [];\n    if (newValue) {\n      this.image = newValue.image;\n      this.bio = newValue.bio;\n      this.email = newValue.email;\n      this.username = newValue.username;\n    }\n  }\n}",
    "className": "ProfileSettings",
    "methods": [
      "hasErrors",
      "currentUser",
      "logout",
      "updateSettings",
      "catch",
      "onCurrentUserLoaded",
      "if"
    ],
    "properties": [],
    "emits": [],
    "embeddingText": "Vue 컴포넌트 이름: ProfileSettings\n파일 경로: ../repo/vue-ts-realworld-app/src/views/ProfileSettings.vue\n\n[Template HTML]\n<div class=\"settings-page\">\n    <div class=\"container page\">\n      <div class=\"row\">\n        <div class=\"col-md-6 offset-md-3 col-xs-12\">\n          <h1 class=\"text-xs-center\">Your Settings</h1>\n          <common-errors-list :errors=\"errors\" />\n          <form>\n            <fieldset :disabled=\"isLoading\">\n              <fieldset class=\"form-group\">\n                <input\n                  v-model=\"image\"\n                  class=\"form-control\"\n                  type=\"text\"\n                  placeholder=\"URL of profile picture\"\n                />\n              </fieldset>\n              <fieldset class=\"form-group\">\n                <input\n                  v-model=\"username\"\n                  class=\"form-control form-control-lg\"\n                  type=\"text\"\n                  placeholder=\"Your Name\"\n                  required=\"true\"\n                />\n              </fieldset>\n              <fieldset class=\"form-group\">\n                <textarea\n                  v-model=\"bio\"\n                  class=\"form-control form-control-lg\"\n                  rows=\"8\"\n                  placeholder=\"Short bio about you\"\n                ></textarea>\n              </fieldset>\n              <fieldset class=\"form-group\">\n                <input\n                  v-model=\"email\"\n                  class=\"form-control form-control-lg\"\n                  type=\"email\"\n                  placeholder=\"Email\"\n                  required=\"true\"\n                />\n              </fieldset>\n              <fieldset class=\"form-group\">\n                <input\n                  v-model=\"password\"\n                  class=\"form-control form-control-lg\"\n                  type=\"password\"\n                  placeholder=\"New password\"\n                />\n              </fieldset>\n              <common-loader v-if=\"isLoading\" :size=\"5\" />\n              <button\n                v-else\n                class=\"btn btn-lg btn-primary pull-xs-right\"\n                @click=\"updateSettings\"\n              >\n                Update Settings\n              </button>\n            </fieldset>\n          </form>\n          <hr />\n          <button class=\"btn btn-outline-danger\" @click=\"logout\">\n            Or click here to logout.\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n\n[Script Code]\nimport { Component, Vue, Watch } from \"vue-property-decorator\";\n\nimport CommonErrorsList from \"@/components/CommonErrorsList.vue\";\nimport CommonLoader from \"@/components/CommonLoader.vue\";\nimport { ICurrentUser } from \"@/store/models\";\nimport User from \"@/store/modules/User\";\nimport { isArrayOfStrings } from \"@/utils/ArrayUtils\";\n\n@Component({\n  components: {\n    CommonLoader,\n    CommonErrorsList\n  }\n})\nexport default class ProfileSettings extends Vue {\n  isLoading = false;\n\n  image: string | null = null;\n  bio = \"\";\n  email = \"\";\n  password: string | null = null;\n  username = \"\";\n  errors?: string[] = [];\n\n  get hasErrors(): boolean {\n    return !!this.errors?.length;\n  }\n\n  get currentUser(): Partial<ICurrentUser> {\n    return User.currentUser || {};\n  }\n\n  logout(): void {\n    User.logout();\n    this.$router.push({ name: this.$routesNames.home });\n  }\n\n  async updateSettings(): Promise<void> {\n    this.errors = [];\n\n    this.isLoading = true;\n    try {\n      await User.update({\n        email: this.email,\n        password: this.password,\n        bio: this.bio,\n        image: this.image,\n        username: this.username\n      });\n      this.$router.push({ name: this.$routesNames.home });\n    } catch (e) {\n      if (isArrayOfStrings(e)) {\n        this.errors = e;\n      } else {\n        throw e;\n      }\n    } finally {\n      this.isLoading = false;\n    }\n  }\n  @Watch(\"currentUser\", { immediate: true })\n  onCurrentUserLoaded(newValue: ICurrentUser): void {\n    this.errors = [];\n    if (newValue) {\n      this.image = newValue.image;\n      this.bio = newValue.bio;\n      this.email = newValue.email;\n      this.username = newValue.username;\n    }\n  }\n}\n\n[Props]: 없음\n[Methods]: hasErrors, currentUser, logout, updateSettings, catch, onCurrentUserLoaded, if\n[Emits]: 없음"
  },
  {
    "filePath": "../repo/vue-ts-realworld-app/src/views/ArticleEdit.vue",
    "template": "<common-loader v-if=\"isLoading\" />\n  <article-editor v-else :article=\"article\" />",
    "script": "import { Component, Vue } from \"vue-property-decorator\";\n\nimport ArticleEditor from \"@/components/ArticleEditor.vue\";\nimport CommonLoader from \"@/components/CommonLoader.vue\";\nimport { Location } from \"@/router\";\nimport { IArticle } from \"@/services/realWorldApi/models\";\nimport Article from \"@/store/modules/Article\";\n\nComponent.registerHooks([\"beforeRouteEnter\", \"beforeRouteUpdate\"]);\n\n@Component({\n  components: {\n    CommonLoader,\n    ArticleEditor\n  }\n})\nexport default class ArticleEdit extends Vue {\n  isLoading = false;\n  article: IArticle | null = null;\n\n  beforeRouteEnter(to: Location, from: Location, next: Function): void {\n    next((vm: ArticleEdit) => {\n      vm.onRouteUpdate(to, from, next);\n    });\n  }\n  beforeRouteUpdate(to: Location, from: Location, next: Function): void {\n    this.onRouteUpdate(to, from, next);\n  }\n\n  async onRouteUpdate(\n    to: Location,\n    from: Location,\n    next: Function\n  ): Promise<void> {\n    next();\n    this.isLoading = true;\n    try {\n      const toSlug = to?.params?.slug;\n      const fromSlug = from?.params?.slug;\n      if (!toSlug) {\n        this.$router.push({ name: this.$routesNames.home });\n        return;\n      }\n      if (toSlug !== fromSlug || !this.article) {\n        await Article.fetchSingle(toSlug);\n        this.article = Article.articlesCache[toSlug];\n      }\n    } catch (e) {\n      this.$router.push({ name: this.$routesNames.home });\n    } finally {\n      this.isLoading = false;\n    }\n  }\n}",
    "className": "ArticleEdit",
    "methods": [
      "beforeRouteEnter",
      "beforeRouteUpdate",
      "onRouteUpdate",
      "if",
      "if",
      "catch"
    ],
    "properties": [],
    "emits": [],
    "embeddingText": "Vue 컴포넌트 이름: ArticleEdit\n파일 경로: ../repo/vue-ts-realworld-app/src/views/ArticleEdit.vue\n\n[Template HTML]\n<common-loader v-if=\"isLoading\" />\n  <article-editor v-else :article=\"article\" />\n\n[Script Code]\nimport { Component, Vue } from \"vue-property-decorator\";\n\nimport ArticleEditor from \"@/components/ArticleEditor.vue\";\nimport CommonLoader from \"@/components/CommonLoader.vue\";\nimport { Location } from \"@/router\";\nimport { IArticle } from \"@/services/realWorldApi/models\";\nimport Article from \"@/store/modules/Article\";\n\nComponent.registerHooks([\"beforeRouteEnter\", \"beforeRouteUpdate\"]);\n\n@Component({\n  components: {\n    CommonLoader,\n    ArticleEditor\n  }\n})\nexport default class ArticleEdit extends Vue {\n  isLoading = false;\n  article: IArticle | null = null;\n\n  beforeRouteEnter(to: Location, from: Location, next: Function): void {\n    next((vm: ArticleEdit) => {\n      vm.onRouteUpdate(to, from, next);\n    });\n  }\n  beforeRouteUpdate(to: Location, from: Location, next: Function): void {\n    this.onRouteUpdate(to, from, next);\n  }\n\n  async onRouteUpdate(\n    to: Location,\n    from: Location,\n    next: Function\n  ): Promise<void> {\n    next();\n    this.isLoading = true;\n    try {\n      const toSlug = to?.params?.slug;\n      const fromSlug = from?.params?.slug;\n      if (!toSlug) {\n        this.$router.push({ name: this.$routesNames.home });\n        return;\n      }\n      if (toSlug !== fromSlug || !this.article) {\n        await Article.fetchSingle(toSlug);\n        this.article = Article.articlesCache[toSlug];\n      }\n    } catch (e) {\n      this.$router.push({ name: this.$routesNames.home });\n    } finally {\n      this.isLoading = false;\n    }\n  }\n}\n\n[Props]: 없음\n[Methods]: beforeRouteEnter, beforeRouteUpdate, onRouteUpdate, if, if, catch\n[Emits]: 없음"
  }
]